
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gxml.analizador;

import java_cup.runtime.*;
import gxml.arbol.*;
import otros.Constante;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class gxmlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public gxmlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public gxmlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public gxmlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\003\004\000\002\003\003" +
    "\000\002\004\011\000\002\005\004\000\002\005\003\000" +
    "\002\006\013\000\002\006\012\000\002\007\004\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\004" +
    "\000\002\011\003\000\002\012\013\000\002\012\012\000" +
    "\002\013\004\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\004" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\012\000\002\020\004\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\013\000\002\022\012\000\002" +
    "\023\004\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\004\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\013\000\002\027\012\000\002\030\004\000" +
    "\002\030\003\000\002\031\012\000\002\031\012\000\002" +
    "\031\011\000\002\032\012\000\002\032\012\000\002\032" +
    "\011\000\002\033\012\000\002\034\004\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\013\000\002\036" +
    "\012\000\002\037\004\000\002\037\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\041\013\000\002\041\012\000\002\042\004\000\002\042" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\005\000\002\045\005\000\002" +
    "\046\005\000\002\047\005\000\002\050\005\000\002\051" +
    "\005\000\002\051\005\000\002\052\005\000\002\052\005" +
    "\000\002\053\005\000\002\053\005\000\002\054\005\000" +
    "\002\054\005\000\002\055\005\000\002\055\005\000\002" +
    "\056\005\000\002\057\005\000\002\060\005\000\002\060" +
    "\005\000\002\061\005\000\002\061\005\000\002\062\005" +
    "\000\002\062\005\000\002\063\005\000\002\063\005\000" +
    "\002\064\005\000\002\064\005\000\002\065\005\000\002" +
    "\066\005\000\002\067\005\000\002\070\005\000\002\070" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\006\002\ufffe\004\006\001\002\000\004\004" +
    "\006\001\002\000\006\002\ufff9\004\ufff9\001\002\000\006" +
    "\010\u0125\011\014\001\002\000\004\002\u0124\001\002\000" +
    "\004\004\ufffc\001\002\000\006\002\uffff\004\013\001\002" +
    "\000\006\002\ufffa\004\ufffa\001\002\000\004\011\014\001" +
    "\002\000\014\023\024\024\017\025\023\026\021\027\026" +
    "\001\002\000\016\005\ufff2\023\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\001\002\000\016\005\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\001\002\000\004\007\u0122\001" +
    "\002\000\016\005\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\001\002\000\004\007\u0120\001\002\000\016\005" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\001\002" +
    "\000\004\007\u011e\001\002\000\004\007\u011c\001\002\000" +
    "\016\005\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\001\002\000\004\007\u011a\001\002\000\016\005\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\001\002\000\016" +
    "\005\032\023\024\024\017\025\023\026\021\027\026\001" +
    "\002\000\016\005\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\001\002\000\004\004\033\001\002\000\006\006" +
    "\u0117\012\040\001\002\000\004\004\uffee\001\002\000\004" +
    "\004\036\001\002\000\006\006\041\012\040\001\002\000" +
    "\004\004\uffef\001\002\000\020\023\024\025\023\030\054" +
    "\031\052\032\055\033\053\034\045\001\002\000\004\011" +
    "\042\001\002\000\004\005\043\001\002\000\006\002\ufff8" +
    "\004\ufff8\001\002\000\022\005\uffe4\023\uffe4\025\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\001\002\000\004" +
    "\007\u0114\001\002\000\022\005\077\023\024\025\023\030" +
    "\054\031\052\032\055\033\053\034\045\001\002\000\022" +
    "\005\uffe5\023\uffe5\025\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\001\002\000\022\005\uffe7\023\uffe7\025\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\001\002\000" +
    "\022\005\uffe8\023\uffe8\025\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\001\002\000\004\007\073\001\002\000" +
    "\004\007\070\001\002\000\004\007\065\001\002\000\004" +
    "\007\062\001\002\000\022\005\uffe9\023\uffe9\025\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\001\002\000\022" +
    "\005\uffea\023\uffea\025\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\001\002\000\022\005\uffe3\023\uffe3\025\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\001\002\000" +
    "\022\005\uffe6\023\uffe6\025\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\001\002\000\006\050\064\051\063\001" +
    "\002\000\052\005\uff85\023\uff85\024\uff85\025\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85" +
    "\046\uff85\047\uff85\001\002\000\052\005\uff86\023\uff86\024" +
    "\uff86\025\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86" +
    "\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043" +
    "\uff86\044\uff86\045\uff86\046\uff86\047\uff86\001\002\000\006" +
    "\050\067\051\066\001\002\000\052\005\uff89\023\uff89\024" +
    "\uff89\025\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89" +
    "\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043" +
    "\uff89\044\uff89\045\uff89\046\uff89\047\uff89\001\002\000\052" +
    "\005\uff8a\023\uff8a\024\uff8a\025\uff8a\030\uff8a\031\uff8a\032" +
    "\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\037\uff8a\040\uff8a" +
    "\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\001\002\000\006\050\072\051\071\001\002\000\052" +
    "\005\uff83\023\uff83\024\uff83\025\uff83\030\uff83\031\uff83\032" +
    "\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83" +
    "\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047" +
    "\uff83\001\002\000\052\005\uff84\023\uff84\024\uff84\025\uff84" +
    "\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84" +
    "\045\uff84\046\uff84\047\uff84\001\002\000\006\050\075\051" +
    "\074\001\002\000\052\005\uff87\023\uff87\024\uff87\025\uff87" +
    "\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\001\002\000\052\005\uff88\023" +
    "\uff88\024\uff88\025\uff88\030\uff88\031\uff88\032\uff88\033\uff88" +
    "\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\001\002" +
    "\000\022\005\uffeb\023\uffeb\025\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\001\002\000\004\004\105\001\002" +
    "\000\004\004\uffe0\001\002\000\004\004\uffdd\001\002\000" +
    "\004\004\uffe1\001\002\000\004\004\u0110\001\002\000\004" +
    "\004\uffdf\001\002\000\016\006\114\013\110\014\115\020" +
    "\112\021\111\022\113\001\002\000\004\004\uffde\001\002" +
    "\000\004\004\uffdc\001\002\000\022\025\023\030\054\031" +
    "\052\035\136\036\116\037\117\040\142\041\124\001\002" +
    "\000\020\030\054\031\052\032\055\033\053\035\136\044" +
    "\126\045\305\001\002\000\022\024\017\030\054\031\052" +
    "\032\055\033\053\035\136\046\324\047\327\001\002\000" +
    "\020\030\054\031\052\032\055\033\053\035\136\044\126" +
    "\045\305\001\002\000\004\012\273\001\002\000\036\024" +
    "\017\025\023\030\054\031\052\032\055\033\053\035\136" +
    "\036\116\037\117\040\142\041\124\042\132\043\145\044" +
    "\126\001\002\000\004\007\271\001\002\000\004\007\266" +
    "\001\002\000\040\005\uffc9\024\uffc9\025\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\001\002\000\040\005" +
    "\167\024\017\025\023\030\054\031\052\032\055\033\053" +
    "\035\136\036\116\037\117\040\142\041\124\042\132\043" +
    "\145\044\126\001\002\000\040\005\uffca\024\uffca\025\uffca" +
    "\030\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\001\002" +
    "\000\040\005\uffbf\024\uffbf\025\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\001\002\000\004\007\163\001" +
    "\002\000\040\005\uffc4\024\uffc4\025\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\001\002\000\004\007\161" +
    "\001\002\000\040\005\uffc1\024\uffc1\025\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\001\002\000\040\005" +
    "\uffcc\024\uffcc\025\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\001\002\000\040\005\uffcd\024\uffcd\025\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\001\002" +
    "\000\004\007\156\001\002\000\040\005\uffcb\024\uffcb\025" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\001" +
    "\002\000\040\005\uffc7\024\uffc7\025\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\001\002\000\040\005\uffc8" +
    "\024\uffc8\025\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\001\002\000\004\007\154\001\002\000\040\005" +
    "\uffc2\024\uffc2\025\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\001\002\000\040\005\uffc3\024\uffc3\025\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\001\002" +
    "\000\040\005\uffc0\024\uffc0\025\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\001\002\000\004\007\151\001" +
    "\002\000\040\005\uffc6\024\uffc6\025\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\001\002\000\040\005\uffc5" +
    "\024\uffc5\025\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\001\002\000\004\007\146\001\002\000\006\050" +
    "\150\051\147\001\002\000\040\005\uff75\024\uff75\025\uff75" +
    "\030\uff75\031\uff75\032\uff75\033\uff75\035\uff75\036\uff75\037" +
    "\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\001\002" +
    "\000\040\005\uff76\024\uff76\025\uff76\030\uff76\031\uff76\032" +
    "\uff76\033\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76" +
    "\042\uff76\043\uff76\044\uff76\001\002\000\006\052\152\053" +
    "\153\001\002\000\040\005\uff7c\024\uff7c\025\uff7c\030\uff7c" +
    "\031\uff7c\032\uff7c\033\uff7c\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\001\002\000\040" +
    "\005\uff7b\024\uff7b\025\uff7b\030\uff7b\031\uff7b\032\uff7b\033" +
    "\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b" +
    "\043\uff7b\044\uff7b\001\002\000\004\054\155\001\002\000" +
    "\046\005\uff80\024\uff80\025\uff80\030\uff80\031\uff80\032\uff80" +
    "\033\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042" +
    "\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\001\002" +
    "\000\006\050\160\051\157\001\002\000\040\005\uff77\024" +
    "\uff77\025\uff77\030\uff77\031\uff77\032\uff77\033\uff77\035\uff77" +
    "\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044" +
    "\uff77\001\002\000\040\005\uff78\024\uff78\025\uff78\030\uff78" +
    "\031\uff78\032\uff78\033\uff78\035\uff78\036\uff78\037\uff78\040" +
    "\uff78\041\uff78\042\uff78\043\uff78\044\uff78\001\002\000\004" +
    "\055\162\001\002\000\042\005\uff74\024\uff74\025\uff74\030" +
    "\uff74\031\uff74\032\uff74\033\uff74\035\uff74\036\uff74\037\uff74" +
    "\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045\uff74\001" +
    "\002\000\006\052\164\053\165\001\002\000\040\005\uff7a" +
    "\024\uff7a\025\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\035" +
    "\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a" +
    "\044\uff7a\001\002\000\040\005\uff79\024\uff79\025\uff79\030" +
    "\uff79\031\uff79\032\uff79\033\uff79\035\uff79\036\uff79\037\uff79" +
    "\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\001\002\000" +
    "\040\005\uffce\024\uffce\025\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\001\002\000\004\004\170\001\002" +
    "\000\010\006\263\016\201\017\200\001\002\000\004\004" +
    "\175\001\002\000\004\004\uffbb\001\002\000\004\004\uffbd" +
    "\001\002\000\004\004\uffbc\001\002\000\010\006\177\016" +
    "\201\017\200\001\002\000\004\004\uffbe\001\002\000\004" +
    "\014\261\001\002\000\004\005\242\001\002\000\006\005" +
    "\203\044\126\001\002\000\004\005\234\001\002\000\004" +
    "\004\204\001\002\000\004\015\212\001\002\000\004\004" +
    "\207\001\002\000\004\004\uffb7\001\002\000\006\006\211" +
    "\015\212\001\002\000\004\004\uffb8\001\002\000\004\016" +
    "\232\001\002\000\004\005\213\001\002\000\010\004\216" +
    "\050\215\051\214\001\002\000\004\004\226\001\002\000" +
    "\004\004\222\001\002\000\004\006\217\001\002\000\004" +
    "\015\220\001\002\000\004\005\221\001\002\000\004\004" +
    "\uffb4\001\002\000\004\006\223\001\002\000\004\015\224" +
    "\001\002\000\004\005\225\001\002\000\004\004\uffb6\001" +
    "\002\000\004\006\227\001\002\000\004\015\230\001\002" +
    "\000\004\005\231\001\002\000\004\004\uffb5\001\002\000" +
    "\004\005\233\001\002\000\004\004\uffb9\001\002\000\004" +
    "\004\204\001\002\000\004\004\236\001\002\000\006\006" +
    "\237\015\212\001\002\000\004\016\240\001\002\000\004" +
    "\005\241\001\002\000\004\004\uffba\001\002\000\010\004" +
    "\245\050\244\051\243\001\002\000\004\004\255\001\002" +
    "\000\004\004\251\001\002\000\004\006\246\001\002\000" +
    "\004\017\247\001\002\000\004\005\250\001\002\000\004" +
    "\004\uffb1\001\002\000\004\006\252\001\002\000\004\017" +
    "\253\001\002\000\004\005\254\001\002\000\004\004\uffb3" +
    "\001\002\000\004\006\256\001\002\000\004\017\257\001" +
    "\002\000\004\005\260\001\002\000\004\004\uffb2\001\002" +
    "\000\004\005\262\001\002\000\004\004\uffd0\001\002\000" +
    "\004\014\264\001\002\000\004\005\265\001\002\000\004" +
    "\004\uffcf\001\002\000\006\050\270\051\267\001\002\000" +
    "\040\005\uff7d\024\uff7d\025\uff7d\030\uff7d\031\uff7d\032\uff7d" +
    "\033\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042" +
    "\uff7d\043\uff7d\044\uff7d\001\002\000\040\005\uff7e\024\uff7e" +
    "\025\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\035\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e" +
    "\001\002\000\004\054\272\001\002\000\040\005\uff7f\024" +
    "\uff7f\025\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\035\uff7f" +
    "\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044" +
    "\uff7f\001\002\000\004\005\274\001\002\000\004\004\uffec" +
    "\001\002\000\022\005\uff92\030\uff92\031\uff92\032\uff92\033" +
    "\uff92\035\uff92\044\uff92\045\uff92\001\002\000\022\005\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\035\uff94\044\uff94\045" +
    "\uff94\001\002\000\022\005\uff95\030\uff95\031\uff95\032\uff95" +
    "\033\uff95\035\uff95\044\uff95\045\uff95\001\002\000\022\005" +
    "\312\030\054\031\052\032\055\033\053\035\136\044\126" +
    "\045\305\001\002\000\022\005\uff97\030\uff97\031\uff97\032" +
    "\uff97\033\uff97\035\uff97\044\uff97\045\uff97\001\002\000\022" +
    "\005\uff91\030\uff91\031\uff91\032\uff91\033\uff91\035\uff91\044" +
    "\uff91\045\uff91\001\002\000\022\005\uff90\030\uff90\031\uff90" +
    "\032\uff90\033\uff90\035\uff90\044\uff90\045\uff90\001\002\000" +
    "\022\005\uff96\030\uff96\031\uff96\032\uff96\033\uff96\035\uff96" +
    "\044\uff96\045\uff96\001\002\000\004\007\307\001\002\000" +
    "\022\005\uff93\030\uff93\031\uff93\032\uff93\033\uff93\035\uff93" +
    "\044\uff93\045\uff93\001\002\000\004\054\310\001\002\000" +
    "\022\005\uff73\030\uff73\031\uff73\032\uff73\033\uff73\035\uff73" +
    "\044\uff73\045\uff73\001\002\000\022\005\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\035\uff98\044\uff98\045\uff98\001\002" +
    "\000\004\004\314\001\002\000\004\004\320\001\002\000" +
    "\006\006\315\013\110\001\002\000\004\022\316\001\002" +
    "\000\004\005\317\001\002\000\004\004\uff99\001\002\000" +
    "\004\006\321\001\002\000\004\022\322\001\002\000\004" +
    "\005\323\001\002\000\004\004\uff9a\001\002\000\004\007" +
    "\351\001\002\000\024\005\uffa9\024\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\035\uffa9\046\uffa9\047\uffa9\001\002\000" +
    "\024\005\uffaa\024\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\035\uffaa\046\uffaa\047\uffaa\001\002\000\004\007\346\001" +
    "\002\000\024\005\340\024\017\030\054\031\052\032\055" +
    "\033\053\035\136\046\324\047\327\001\002\000\024\005" +
    "\uffac\024\uffac\030\uffac\031\uffac\032\uffac\033\uffac\035\uffac" +
    "\046\uffac\047\uffac\001\002\000\024\005\uffab\024\uffab\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\035\uffab\046\uffab\047\uffab" +
    "\001\002\000\024\005\uffa7\024\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\035\uffa7\046\uffa7\047\uffa7\001\002\000\024" +
    "\005\uffa8\024\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\035" +
    "\uffa8\046\uffa8\047\uffa8\001\002\000\024\005\uffa6\024\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\035\uffa6\046\uffa6\047" +
    "\uffa6\001\002\000\024\005\uffae\024\uffae\030\uffae\031\uffae" +
    "\032\uffae\033\uffae\035\uffae\046\uffae\047\uffae\001\002\000" +
    "\024\005\uffad\024\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\035\uffad\046\uffad\047\uffad\001\002\000\004\004\342\001" +
    "\002\000\024\005\uffaf\024\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\035\uffaf\046\uffaf\047\uffaf\001\002\000\004\006" +
    "\343\001\002\000\004\020\344\001\002\000\004\005\345" +
    "\001\002\000\004\004\uffb0\001\002\000\006\052\347\053" +
    "\350\001\002\000\024\005\uff71\024\uff71\030\uff71\031\uff71" +
    "\032\uff71\033\uff71\035\uff71\046\uff71\047\uff71\001\002\000" +
    "\024\005\uff70\024\uff70\030\uff70\031\uff70\032\uff70\033\uff70" +
    "\035\uff70\046\uff70\047\uff70\001\002\000\004\054\352\001" +
    "\002\000\024\005\uff72\024\uff72\030\uff72\031\uff72\032\uff72" +
    "\033\uff72\035\uff72\046\uff72\047\uff72\001\002\000\022\005" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\035\uff9d\044\uff9d" +
    "\045\uff9d\001\002\000\022\005\uff9f\030\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\035\uff9f\044\uff9f\045\uff9f\001\002\000\022" +
    "\005\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\035\uffa0\044" +
    "\uffa0\045\uffa0\001\002\000\022\005\365\030\054\031\052" +
    "\032\055\033\053\035\136\044\126\045\305\001\002\000" +
    "\022\005\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\035\uff9c" +
    "\044\uff9c\045\uff9c\001\002\000\022\005\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\035\uffa2\044\uffa2\045\uffa2\001\002" +
    "\000\022\005\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\035" +
    "\uff9b\044\uff9b\045\uff9b\001\002\000\022\005\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\035\uffa1\044\uffa1\045\uffa1\001" +
    "\002\000\022\005\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e" +
    "\035\uff9e\044\uff9e\045\uff9e\001\002\000\022\005\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\033\uffa3\035\uffa3\044\uffa3\045\uffa3" +
    "\001\002\000\004\004\367\001\002\000\004\004\373\001" +
    "\002\000\006\006\370\013\110\001\002\000\004\021\371" +
    "\001\002\000\004\005\372\001\002\000\004\004\uffa4\001" +
    "\002\000\004\006\374\001\002\000\004\021\375\001\002" +
    "\000\004\005\376\001\002\000\004\004\uffa5\001\002\000" +
    "\024\005\uffd9\025\uffd9\030\uffd9\031\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\001\002\000\024\005\u010a\025" +
    "\023\030\054\031\052\035\136\036\116\037\117\040\142" +
    "\041\124\001\002\000\024\005\uffd6\025\uffd6\030\uffd6\031" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\001\002" +
    "\000\024\005\uffd7\025\uffd7\030\uffd7\031\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\001\002\000\024\005\uffd3" +
    "\025\uffd3\030\uffd3\031\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\001\002\000\024\005\uffd8\025\uffd8\030\uffd8" +
    "\031\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001" +
    "\002\000\024\005\uffd1\025\uffd1\030\uffd1\031\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\001\002\000\024\005" +
    "\uffd2\025\uffd2\030\uffd2\031\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\001\002\000\024\005\uffd5\025\uffd5\030" +
    "\uffd5\031\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\001\002\000\024\005\uffd4\025\uffd4\030\uffd4\031\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\001\002\000\024" +
    "\005\uffda\025\uffda\030\uffda\031\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\001\002\000\004\004\u010b\001\002" +
    "\000\004\006\u010c\001\002\000\004\013\u010d\001\002\000" +
    "\004\005\u010e\001\002\000\004\004\uffdb\001\002\000\004" +
    "\004\uffe2\001\002\000\016\006\u0111\013\110\014\115\020" +
    "\112\021\111\022\113\001\002\000\004\012\u0112\001\002" +
    "\000\004\005\u0113\001\002\000\004\004\uffed\001\002\000" +
    "\006\052\u0115\053\u0116\001\002\000\022\005\uff82\023\uff82" +
    "\025\uff82\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\001" +
    "\002\000\022\005\uff81\023\uff81\025\uff81\030\uff81\031\uff81" +
    "\032\uff81\033\uff81\034\uff81\001\002\000\004\011\u0118\001" +
    "\002\000\004\005\u0119\001\002\000\006\002\ufff7\004\ufff7" +
    "\001\002\000\004\055\u011b\001\002\000\016\005\uff8b\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\001\002\000\004" +
    "\054\u011d\001\002\000\030\005\uff8f\023\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\001\002\000\004\054\u011f\001\002\000\050\005" +
    "\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\001\002" +
    "\000\004\055\u0121\001\002\000\016\005\uff8c\023\uff8c\024" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\001\002\000\004\054\u0123" +
    "\001\002\000\052\005\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\046\uff8e\047\uff8e\001\002\000\004\002\001\001\002" +
    "\000\004\005\u0126\001\002\000\004\004\u0127\001\002\000" +
    "\004\006\u0128\001\002\000\004\010\u0129\001\002\000\004" +
    "\005\u012a\001\002\000\004\004\ufffb\001\002\000\004\004" +
    "\ufffd\001\002\000\006\002\000\004\013\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\014\002\006\003\003\004\007\005\010\006" +
    "\004\001\001\000\010\004\u012a\005\u012b\006\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\027\010\021\044\024\045" +
    "\026\046\014\047\017\050\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\030\044\024\045\026\046\014\047\017" +
    "\050\015\001\001\000\002\001\001\000\006\011\034\012" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\013\045\014\056\044\055\046\043\051\050\052\047" +
    "\053\060\054\046\055\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\075\044\055\046\043\051\050\052" +
    "\047\053\060\054\046\055\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\102\016\101\017\077\022\103\033\105" +
    "\036\100\041\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\u010e\017\077\022\103" +
    "\033\105\036\100\041\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\020\377\021\376\046\u0102\051\u0101\052\u0100\056\u0103\057" +
    "\u0106\060\u0107\061\u0105\062\u0104\001\001\000\024\037\355" +
    "\040\357\051\354\052\353\053\362\054\352\056\361\065" +
    "\360\066\356\001\001\000\026\034\327\035\335\045\330" +
    "\051\325\052\324\053\333\054\332\056\331\067\336\070" +
    "\334\001\001\000\024\042\277\043\300\051\276\052\275" +
    "\053\305\054\274\056\303\065\302\066\301\001\001\000" +
    "\002\001\001\000\042\023\120\024\130\045\127\046\124" +
    "\051\121\052\117\053\134\054\133\056\132\057\142\060" +
    "\143\061\137\062\136\063\126\064\140\065\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\024\165\045\127\046\124\051\121\052\117\053\134" +
    "\054\133\056\132\057\142\060\143\061\137\062\136\063" +
    "\126\064\140\065\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\170\026\172\027\173\032\171\001\001\000\002" +
    "\001\001\000\010\026\175\027\173\032\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\201\001\001\000\002\001\001\000\006" +
    "\030\204\031\205\001\001\000\002\001\001\000\004\031" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\234\031\205\001\001\000\004\031\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\043\310\051\276" +
    "\052\275\053\305\054\274\056\303\065\302\066\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\035\340\045\330\051\325\052" +
    "\324\053\333\054\332\056\331\067\336\070\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\040\363\051\354\052" +
    "\353\053\362\054\352\056\361\065\360\066\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\u0108\046\u0102\051\u0101" +
    "\052\u0100\056\u0103\057\u0106\060\u0107\061\u0105\062\u0104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\011\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$gxmlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$gxmlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$gxmlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s) {
        StringBuilder m = new StringBuilder("Error Sintactico");
        int yline = s.left, ycol = s.right;

        if(s.left >= 0) {
        	m.append(" en la Linea " + (s.left));
        	if(s.right >= 0) {
        		m.append(" Columna " + (s.right));
        	}
        	m.append(". No se esperaba este componente: " + s.value + ".");
        }
        System.out.println(m);
        Constante.consola += String.valueOf(m) + "\n";
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        syntax_error(s);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$gxmlParser$actions {
  private final gxmlParser parser;

  /** Constructor */
  CUP$gxmlParser$actions(gxmlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$gxmlParser$do_action_part00000000(
    int                        CUP$gxmlParser$act_num,
    java_cup.runtime.lr_parser CUP$gxmlParser$parser,
    java.util.Stack            CUP$gxmlParser$stack,
    int                        CUP$gxmlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$gxmlParser$result;

      /* select the action based on the action number */
      switch (CUP$gxmlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		RESULT = start_val;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$gxmlParser$parser.done_parsing();
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= IMPORTACIONES VENTANAS 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= VENTANAS 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTACIONES ::= IMPORTACIONES IMPORTAR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",1, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTACIONES ::= IMPORTAR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",1, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTAR ::= open pr_importar close open slash pr_importar close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VENTANAS ::= VENTANAS VENTANA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("VENTANAS",3, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VENTANAS ::= VENTANA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("VENTANAS",3, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VENTANA ::= open pr_ventana ELEMENTOS_VENTANA close CONTENEDORES open slash pr_ventana close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("VENTANA",4, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-8)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VENTANA ::= open pr_ventana ELEMENTOS_VENTANA close open slash pr_ventana close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("VENTANA",4, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELEMENTOS_VENTANA ::= ELEMENTOS_VENTANA ELEMENTO_VENTANA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",5, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ELEMENTOS_VENTANA ::= ELEMENTO_VENTANA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",5, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELEMENTO_VENTANA ::= ID 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTO_VENTANA ::= TIPO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO_VENTANA ::= COLOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTO_VENTANA ::= ACCIONINI 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO_VENTANA ::= ACCIONFIN 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",6, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENEDORES ::= CONTENEDORES CONTENEDOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",7, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENEDORES ::= CONTENEDOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",7, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENEDOR ::= open pr_contenedor ELEMENTOS_CONTENEDOR close INSTRUCCIONES open slash pr_contenedor close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-8)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENEDOR ::= open pr_contenedor ELEMENTOS_CONTENEDOR close open slash pr_contenedor close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTOS_CONTENEDOR ::= ELEMENTOS_CONTENEDOR ELEMENTO_CONTENEDOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",9, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTOS_CONTENEDOR ::= ELEMENTO_CONTENEDOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",9, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELEMENTO_CONTENEDOR ::= ID 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ELEMENTO_CONTENEDOR ::= X 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ELEMENTO_CONTENEDOR ::= Y 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELEMENTO_CONTENEDOR ::= ALTO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMENTO_CONTENEDOR ::= ANCHO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMENTO_CONTENEDOR ::= COLOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELEMENTO_CONTENEDOR ::= BORDE 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",11, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INSTRUCCION ::= TEXTO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSTRUCCION ::= CONTROLADOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSTRUCCION ::= MULTIMEDIA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCION ::= BOTON 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCION ::= ENVIAR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",12, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TEXTO ::= open pr_texto ELEMENTOS_TEXTO close open slash pr_texto close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("TEXTO",13, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTOS_TEXTO ::= ELEMENTOS_TEXTO ELEMENTO_TEXTO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTO",14, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTOS_TEXTO ::= ELEMENTO_TEXTO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTO",14, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTO_TEXTO ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTO_TEXTO ::= X 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTO_TEXTO ::= Y 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTO_TEXTO ::= FUENTE 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTO_TEXTO ::= TAM 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTO_TEXTO ::= COLOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTO_TEXTO ::= NEGRITA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTO_TEXTO ::= CURSIVA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",15, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONTROLADOR ::= open pr_control ELEMENTOS_CONTROLADOR close ESPECIALES open slash pr_control close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",16, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-8)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTROLADOR ::= open pr_control ELEMENTOS_CONTROLADOR close open slash pr_control close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",16, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTOS_CONTROLADOR ::= ELEMENTOS_CONTROLADOR ELEMENTO_CONTROLADOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLADOR",17, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTOS_CONTROLADOR ::= ELEMENTO_CONTROLADOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLADOR",17, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO_CONTROLADOR ::= TIPO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO_CONTROLADOR ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTO_CONTROLADOR ::= X 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO_CONTROLADOR ::= Y 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO_CONTROLADOR ::= ALTO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTO_CONTROLADOR ::= ANCHO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTO_CONTROLADOR ::= FUENTE 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTO_CONTROLADOR ::= TAM 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEMENTO_CONTROLADOR ::= COLOR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEMENTO_CONTROLADOR ::= NEGRITA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTO_CONTROLADOR ::= CURSIVA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTO_CONTROLADOR ::= MAXIMO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELEMENTO_CONTROLADOR ::= MINIMO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELEMENTO_CONTROLADOR ::= ACCION 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ESPECIALES ::= ESPECIALES ESPECIAL 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ESPECIALES",19, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ESPECIALES ::= ESPECIAL 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ESPECIALES",19, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ESPECIAL ::= LISTA_DATO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",20, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ESPECIAL ::= DEFECTO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",20, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTA_DATO ::= open pr_listadato ACCION close DATOS open slash pr_listadato close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("LISTA_DATO",21, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-8)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTA_DATO ::= open pr_listadato close DATOS open slash pr_listadato close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("LISTA_DATO",21, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DATOS ::= DATOS DATO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DATOS",22, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DATOS ::= DATO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DATOS",22, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DATO ::= open pr_dato close entero open slash pr_dato close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DATO",23, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DATO ::= open pr_dato close decimal open slash pr_dato close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DATO",23, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DATO ::= open pr_dato close open slash pr_dato close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DATO",23, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DEFECTO ::= open pr_defecto close entero open slash pr_defecto close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DEFECTO",24, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DEFECTO ::= open pr_defecto close decimal open slash pr_defecto close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DEFECTO",24, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DEFECTO ::= open pr_defecto close open slash pr_defecto close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DEFECTO",24, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MULTIMEDIA ::= open pr_multimedia ELEMENTOS_MULTIMEDIA close open slash pr_multimedia close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MULTIMEDIA",25, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEMENTOS_MULTIMEDIA ::= ELEMENTOS_MULTIMEDIA ELEMENTO_MULTIMEDIA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIA",26, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELEMENTOS_MULTIMEDIA ::= ELEMENTO_MULTIMEDIA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIA",26, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELEMENTO_MULTIMEDIA ::= PATH 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELEMENTO_MULTIMEDIA ::= TIPO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTO_MULTIMEDIA ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTO_MULTIMEDIA ::= X 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTO_MULTIMEDIA ::= Y 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTO_MULTIMEDIA ::= ALTO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELEMENTO_MULTIMEDIA ::= ANCHO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTO_MULTIMEDIA ::= AUTO_REPRODUCCION 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BOTON ::= open pr_boton ELEMENTOS_BOTON close TEXTO open slash pr_boton close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("BOTON",28, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-8)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BOTON ::= open pr_boton ELEMENTOS_BOTON close open slash pr_boton close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("BOTON",28, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELEMENTOS_BOTON ::= ELEMENTOS_BOTON ELEMENTO_BOTON 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTON",29, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELEMENTOS_BOTON ::= ELEMENTO_BOTON 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTON",29, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELEMENTO_BOTON ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELEMENTO_BOTON ::= X 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELEMENTO_BOTON ::= Y 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMENTO_BOTON ::= ALTO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMENTO_BOTON ::= ANCHO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELEMENTO_BOTON ::= REFERENCIA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELEMENTO_BOTON ::= ACCION 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ENVIAR ::= open pr_enviar ELEMENTOS_ENVIAR close TEXTO open slash pr_enviar close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ENVIAR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-8)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ENVIAR ::= open pr_enviar ELEMENTOS_ENVIAR close open slash pr_enviar close 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ENVIAR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-7)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELEMENTOS_ENVIAR ::= ELEMENTOS_ENVIAR ELEMENTO_ENVIAR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",32, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELEMENTOS_ENVIAR ::= ELEMENTO_ENVIAR 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",32, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELEMENTO_ENVIAR ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELEMENTO_ENVIAR ::= X 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELEMENTO_ENVIAR ::= Y 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELEMENTO_ENVIAR ::= ALTO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELEMENTO_ENVIAR ::= ANCHO 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELEMENTO_ENVIAR ::= REFERENCIA 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELEMENTO_ENVIAR ::= ACCION 
            {
              Object RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ID ::= pr_id igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ID",34, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TIPO ::= pr_tipo igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("TIPO",35, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COLOR ::= pr_color igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("COLOR",36, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ACCIONINI ::= pr_accioninicial igual llamada 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ACCIONINI",37, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ACCIONFIN ::= pr_accionfinal igual llamada 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ACCIONFIN",38, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // X ::= pr_x igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("X",39, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // X ::= pr_x igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("X",39, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Y ::= pr_y igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("Y",40, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Y ::= pr_y igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("Y",40, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ALTO ::= pr_alto igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ALTO",41, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ALTO ::= pr_alto igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ALTO",41, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ANCHO ::= pr_ancho igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ANCHO",42, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ANCHO ::= pr_ancho igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ANCHO",42, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // BORDE ::= pr_borde igual pr_verdadero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("BORDE",43, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // BORDE ::= pr_borde igual pr_falso 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("BORDE",43, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NOMBRE ::= pr_nombre igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("NOMBRE",44, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FUENTE ::= pr_fuente igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("FUENTE",45, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TAM ::= pr_tam igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("TAM",46, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TAM ::= pr_tam igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("TAM",46, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NEGRITA ::= pr_negrita igual pr_verdadero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("NEGRITA",47, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NEGRITA ::= pr_negrita igual pr_falso 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("NEGRITA",47, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CURSIVA ::= pr_cursiva igual pr_verdadero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CURSIVA",48, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CURSIVA ::= pr_cursiva igual pr_falso 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CURSIVA",48, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // MAXIMO ::= pr_maximo igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MAXIMO",49, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // MAXIMO ::= pr_maximo igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MAXIMO",49, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // MINIMO ::= pr_minimo igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MINIMO",50, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MINIMO ::= pr_minimo igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MINIMO",50, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ACCION ::= pr_accion igual llamada 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ACCION",51, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // REFERENCIA ::= pr_referencia igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("REFERENCIA",52, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PATH ::= pr_path igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("PATH",53, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // AUTO_REPRODUCCION ::= pr_autoreproduccion igual pr_verdadero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("AUTO_REPRODUCCION",54, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // AUTO_REPRODUCCION ::= pr_autoreproduccion igual pr_falso 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Constante.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("AUTO_REPRODUCCION",54, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$gxmlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$gxmlParser$do_action(
    int                        CUP$gxmlParser$act_num,
    java_cup.runtime.lr_parser CUP$gxmlParser$parser,
    java.util.Stack            CUP$gxmlParser$stack,
    int                        CUP$gxmlParser$top)
    throws java.lang.Exception
    {
              return CUP$gxmlParser$do_action_part00000000(
                               CUP$gxmlParser$act_num,
                               CUP$gxmlParser$parser,
                               CUP$gxmlParser$stack,
                               CUP$gxmlParser$top);
    }
}

}
