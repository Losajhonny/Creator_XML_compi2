
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gxml.analizador;

import entorno.Entorno;
import java_cup.runtime.*;
import gxml.arbol.*;
import gxml.arbol.componente.*;
import gxml.arbol.especial.*;
import gxml.arbol.contenedor.*;
import fs.arbol.Expresion.Operaciones.Operacion.Tipo;
import otros.Constante;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class gxmlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public gxmlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public gxmlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public gxmlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\005\000\002\006\005" +
    "\000\002\006\003\000\002\004\005\000\002\004\004\000" +
    "\002\005\006\000\002\007\005\000\002\007\003\000\002" +
    "\010\011\000\002\010\007\000\002\010\005\000\002\032" +
    "\004\000\002\032\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\011\005\000\002\011\003\000\002\012\007\000\002" +
    "\012\011\000\002\012\005\000\002\031\004\000\002\031" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\013\005\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\007\000\002\015\007" +
    "\000\002\036\004\000\002\036\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\016\011\000\002\016\007\000\002\033\004" +
    "\000\002\033\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\017\005\000" +
    "\002\017\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\010\000\002\022\005\000\002\022\003\000\002\023" +
    "\006\000\002\024\006\000\002\025\007\000\002\035\004" +
    "\000\002\035\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\026" +
    "\007\000\002\026\007\000\002\026\011\000\002\034\004" +
    "\000\002\034\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\027\007\000\002\027" +
    "\007\000\002\027\011\000\002\030\004\000\002\030\003" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\046\005\000\002\047\005\000\002\050" +
    "\005\000\002\051\005\000\002\052\005\000\002\053\005" +
    "\000\002\053\005\000\002\054\005\000\002\054\005\000" +
    "\002\055\005\000\002\055\005\000\002\056\005\000\002" +
    "\056\005\000\002\057\005\000\002\057\005\000\002\060" +
    "\005\000\002\061\005\000\002\062\005\000\002\062\005" +
    "\000\002\063\005\000\002\063\005\000\002\064\005\000" +
    "\002\064\005\000\002\065\005\000\002\065\005\000\002" +
    "\066\005\000\002\066\005\000\002\067\005\000\002\070" +
    "\005\000\002\071\005\000\002\072\005\000\002\072\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\006\002\uffff\004\006\001\002\000\006\055" +
    "\u0106\056\u0108\001\002\000\004\002\000\001\002\000\010" +
    "\003\012\007\013\010\014\001\002\000\004\002\010\001" +
    "\002\000\004\002\001\001\002\000\006\055\ufff6\056\ufff6" +
    "\001\002\000\004\005\u0104\001\002\000\004\054\u0101\001" +
    "\002\000\014\022\031\023\024\024\030\025\026\026\033" +
    "\001\002\000\006\055\ufff9\056\ufff9\001\002\000\006\055" +
    "\017\056\020\001\002\000\006\003\012\010\014\001\002" +
    "\000\004\002\ufffd\001\002\000\006\055\ufff7\056\ufff7\001" +
    "\002\000\016\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\055\uffec\001\002\000\016\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\026\uffee\055\uffee\001\002\000\004\006\377\001\002" +
    "\000\016\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\055" +
    "\uffed\001\002\000\004\006\375\001\002\000\016\022\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\026\ufff1\055\ufff1\001\002\000" +
    "\004\006\373\001\002\000\004\006\371\001\002\000\016" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\055\ufff0\001" +
    "\002\000\004\006\367\001\002\000\016\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\055\uffef\001\002\000\016\022" +
    "\031\023\024\024\030\025\026\026\033\055\037\001\002" +
    "\000\016\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\055" +
    "\ufff2\001\002\000\010\003\040\005\042\011\041\001\002" +
    "\000\004\005\365\001\002\000\020\022\031\024\030\027" +
    "\062\030\060\031\063\032\061\033\053\001\002\000\004" +
    "\010\051\001\002\000\004\055\uffea\001\002\000\004\055" +
    "\045\001\002\000\010\003\040\005\046\011\041\001\002" +
    "\000\004\010\050\001\002\000\004\055\uffeb\001\002\000" +
    "\006\055\ufff5\056\ufff5\001\002\000\006\055\ufff4\056\ufff4" +
    "\001\002\000\022\022\uffdf\024\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\055\uffdf\001\002\000\004\006\362" +
    "\001\002\000\022\022\031\024\030\027\062\030\060\031" +
    "\063\032\061\033\053\055\104\001\002\000\022\022\uffe0" +
    "\024\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\055" +
    "\uffe0\001\002\000\022\022\uffe2\024\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\055\uffe2\001\002\000\022\022" +
    "\uffe3\024\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\055\uffe3\001\002\000\004\006\101\001\002\000\004\006" +
    "\076\001\002\000\004\006\073\001\002\000\004\006\070" +
    "\001\002\000\022\022\uffe4\024\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\055\uffe4\001\002\000\022\022\uffe5" +
    "\024\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\055" +
    "\uffe5\001\002\000\022\022\uffde\024\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\055\uffde\001\002\000\022\022" +
    "\uffe1\024\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\055\uffe1\001\002\000\006\047\072\050\071\001\002\000" +
    "\054\022\uff82\023\uff82\024\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\054\uff82\055\uff82\001\002\000\054\022\uff83\023\uff83\024" +
    "\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83" +
    "\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043" +
    "\uff83\044\uff83\045\uff83\046\uff83\054\uff83\055\uff83\001\002" +
    "\000\006\047\075\050\074\001\002\000\054\022\uff86\023" +
    "\uff86\024\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86" +
    "\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\046\uff86\054\uff86\055\uff86" +
    "\001\002\000\054\022\uff87\023\uff87\024\uff87\027\uff87\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87" +
    "\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045" +
    "\uff87\046\uff87\054\uff87\055\uff87\001\002\000\006\047\100" +
    "\050\077\001\002\000\054\022\uff80\023\uff80\024\uff80\027" +
    "\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80" +
    "\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044" +
    "\uff80\045\uff80\046\uff80\054\uff80\055\uff80\001\002\000\054" +
    "\022\uff81\023\uff81\024\uff81\027\uff81\030\uff81\031\uff81\032" +
    "\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\054" +
    "\uff81\055\uff81\001\002\000\006\047\103\050\102\001\002" +
    "\000\054\022\uff84\023\uff84\024\uff84\027\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037\uff84" +
    "\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046" +
    "\uff84\054\uff84\055\uff84\001\002\000\054\022\uff85\023\uff85" +
    "\024\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033\uff85\034" +
    "\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\046\uff85\054\uff85\055\uff85\001" +
    "\002\000\016\005\113\012\114\013\121\017\122\020\112" +
    "\021\110\001\002\000\022\022\uffe6\024\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\055\uffe6\001\002\000\004" +
    "\055\uffd9\001\002\000\004\055\uffdc\001\002\000\020\027" +
    "\062\030\060\031\063\032\061\034\134\043\163\044\316" +
    "\001\002\000\004\055\uffdb\001\002\000\020\027\062\030" +
    "\060\031\063\032\061\034\134\043\163\044\316\001\002" +
    "\000\004\011\306\001\002\000\022\024\030\027\062\030" +
    "\060\034\134\035\153\036\155\037\176\040\161\001\002" +
    "\000\004\055\uffda\001\002\000\004\055\uffd8\001\002\000" +
    "\004\055\uffd7\001\002\000\004\055\261\001\002\000\036" +
    "\023\024\024\030\027\062\030\060\031\063\032\061\034" +
    "\134\035\153\036\155\037\176\040\161\041\167\042\201" +
    "\043\163\001\002\000\022\023\024\027\062\030\060\031" +
    "\063\032\061\034\134\045\123\046\126\001\002\000\004" +
    "\006\151\001\002\000\024\023\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\034\uffa8\045\uffa8\046\uffa8\055\uffa8\001\002" +
    "\000\024\023\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\034" +
    "\uffa9\045\uffa9\046\uffa9\055\uffa9\001\002\000\004\006\146" +
    "\001\002\000\024\023\024\027\062\030\060\031\063\032" +
    "\061\034\134\045\123\046\126\055\142\001\002\000\024" +
    "\023\uffab\027\uffab\030\uffab\031\uffab\032\uffab\034\uffab\045" +
    "\uffab\046\uffab\055\uffab\001\002\000\024\023\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\034\uffaa\045\uffaa\046\uffaa\055" +
    "\uffaa\001\002\000\024\023\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\034\uffa6\045\uffa6\046\uffa6\055\uffa6\001\002\000" +
    "\024\023\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7" +
    "\045\uffa7\046\uffa7\055\uffa7\001\002\000\004\006\140\001" +
    "\002\000\024\023\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\034\uffa5\045\uffa5\046\uffa5\055\uffa5\001\002\000\024\023" +
    "\uffad\027\uffad\030\uffad\031\uffad\032\uffad\034\uffad\045\uffad" +
    "\046\uffad\055\uffad\001\002\000\024\023\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\034\uffac\045\uffac\046\uffac\055\uffac" +
    "\001\002\000\004\053\141\001\002\000\050\023\uff7d\024" +
    "\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\034\uff7d\035\uff7d" +
    "\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\054\uff7d\055\uff7d\001\002\000\004" +
    "\005\144\001\002\000\024\023\uffae\027\uffae\030\uffae\031" +
    "\uffae\032\uffae\034\uffae\045\uffae\046\uffae\055\uffae\001\002" +
    "\000\004\017\145\001\002\000\004\055\uffaf\001\002\000" +
    "\006\051\147\052\150\001\002\000\024\023\uff6e\027\uff6e" +
    "\030\uff6e\031\uff6e\032\uff6e\034\uff6e\045\uff6e\046\uff6e\055" +
    "\uff6e\001\002\000\024\023\uff6d\027\uff6d\030\uff6d\031\uff6d" +
    "\032\uff6d\034\uff6d\045\uff6d\046\uff6d\055\uff6d\001\002\000" +
    "\004\053\152\001\002\000\024\023\uff6f\027\uff6f\030\uff6f" +
    "\031\uff6f\032\uff6f\034\uff6f\045\uff6f\046\uff6f\055\uff6f\001" +
    "\002\000\004\006\257\001\002\000\040\023\uffc3\024\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\055\uffc3" +
    "\001\002\000\004\006\254\001\002\000\040\023\uffc4\024" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\055" +
    "\uffc4\001\002\000\040\023\024\024\030\027\062\030\060" +
    "\031\063\032\061\034\134\035\153\036\155\037\176\040" +
    "\161\041\167\042\201\043\163\055\220\001\002\000\040" +
    "\023\uffb9\024\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\055\uffb9\001\002\000\004\006\215\001\002\000" +
    "\040\023\uffbe\024\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\055\uffbe\001\002\000\004\006\213\001\002" +
    "\000\040\023\uffbb\024\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\055\uffbb\001\002\000\040\023\uffc6\024" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\055" +
    "\uffc6\001\002\000\040\023\uffc7\024\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\055\uffc7\001\002\000\004" +
    "\006\210\001\002\000\040\023\uffc5\024\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\055\uffc5\001\002\000" +
    "\040\023\uffc1\024\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\055\uffc1\001\002\000\040\023\uffc2\024\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\055\uffc2" +
    "\001\002\000\040\023\uffbc\024\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\055\uffbc\001\002\000\040\023" +
    "\uffba\024\uffba\027\uffba\030\uffba\031\uffba\032\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\055\uffba\001\002\000\040\023\uffbd\024\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\055\uffbd\001\002" +
    "\000\004\006\205\001\002\000\040\023\uffc0\024\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\055\uffc0\001" +
    "\002\000\040\023\uffbf\024\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\055\uffbf\001\002\000\004\006\202" +
    "\001\002\000\006\047\204\050\203\001\002\000\040\023" +
    "\uff72\024\uff72\027\uff72\030\uff72\031\uff72\032\uff72\034\uff72" +
    "\035\uff72\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043" +
    "\uff72\055\uff72\001\002\000\040\023\uff73\024\uff73\027\uff73" +
    "\030\uff73\031\uff73\032\uff73\034\uff73\035\uff73\036\uff73\037" +
    "\uff73\040\uff73\041\uff73\042\uff73\043\uff73\055\uff73\001\002" +
    "\000\006\051\206\052\207\001\002\000\042\023\uff79\024" +
    "\uff79\027\uff79\030\uff79\031\uff79\032\uff79\034\uff79\035\uff79" +
    "\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\054" +
    "\uff79\055\uff79\001\002\000\042\023\uff78\024\uff78\027\uff78" +
    "\030\uff78\031\uff78\032\uff78\034\uff78\035\uff78\036\uff78\037" +
    "\uff78\040\uff78\041\uff78\042\uff78\043\uff78\054\uff78\055\uff78" +
    "\001\002\000\006\047\212\050\211\001\002\000\040\023" +
    "\uff74\024\uff74\027\uff74\030\uff74\031\uff74\032\uff74\034\uff74" +
    "\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042\uff74\043" +
    "\uff74\055\uff74\001\002\000\040\023\uff75\024\uff75\027\uff75" +
    "\030\uff75\031\uff75\032\uff75\034\uff75\035\uff75\036\uff75\037" +
    "\uff75\040\uff75\041\uff75\042\uff75\043\uff75\055\uff75\001\002" +
    "\000\004\057\214\001\002\000\044\023\uff71\024\uff71\027" +
    "\uff71\030\uff71\031\uff71\032\uff71\034\uff71\035\uff71\036\uff71" +
    "\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\054" +
    "\uff71\055\uff71\001\002\000\006\051\216\052\217\001\002" +
    "\000\042\023\uff77\024\uff77\027\uff77\030\uff77\031\uff77\032" +
    "\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77" +
    "\042\uff77\043\uff77\054\uff77\055\uff77\001\002\000\042\023" +
    "\uff76\024\uff76\027\uff76\030\uff76\031\uff76\032\uff76\034\uff76" +
    "\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043" +
    "\uff76\054\uff76\055\uff76\001\002\000\010\005\223\015\230" +
    "\016\227\001\002\000\040\023\uffc8\024\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\055\uffc8\001\002\000" +
    "\004\055\250\001\002\000\004\013\247\001\002\000\004" +
    "\055\uffb5\001\002\000\004\055\uffb7\001\002\000\004\055" +
    "\uffb6\001\002\000\004\054\244\001\002\000\004\055\231" +
    "\001\002\000\004\014\233\001\002\000\004\055\240\001" +
    "\002\000\004\054\235\001\002\000\004\055\uffb2\001\002" +
    "\000\004\005\236\001\002\000\004\014\237\001\002\000" +
    "\004\055\uffb1\001\002\000\006\005\241\014\233\001\002" +
    "\000\004\015\243\001\002\000\004\055\uffb3\001\002\000" +
    "\004\055\uffb4\001\002\000\004\005\245\001\002\000\004" +
    "\016\246\001\002\000\004\055\uffb0\001\002\000\004\055" +
    "\uffc9\001\002\000\010\005\251\015\230\016\227\001\002" +
    "\000\004\013\253\001\002\000\004\055\uffb8\001\002\000" +
    "\004\055\uffca\001\002\000\006\047\256\050\255\001\002" +
    "\000\042\023\uff7a\024\uff7a\027\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a" +
    "\042\uff7a\043\uff7a\054\uff7a\055\uff7a\001\002\000\042\023" +
    "\uff7b\024\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\054\uff7b\055\uff7b\001\002\000\004\053\260\001\002" +
    "\000\042\023\uff7c\024\uff7c\027\uff7c\030\uff7c\031\uff7c\032" +
    "\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\054\uff7c\055\uff7c\001\002\000\016\005" +
    "\263\012\114\013\121\017\122\020\112\021\110\001\002" +
    "\000\004\055\uffdd\001\002\000\004\011\264\001\002\000" +
    "\004\055\uffe8\001\002\000\026\024\uffd3\027\uffd3\030\uffd3" +
    "\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\054\uffd3\055" +
    "\uffd3\001\002\000\026\024\030\027\062\030\060\034\134" +
    "\035\153\036\155\037\176\040\161\054\301\055\277\001" +
    "\002\000\026\024\uffd0\027\uffd0\030\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\054\uffd0\055\uffd0\001\002\000" +
    "\026\024\uffd1\027\uffd1\030\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\054\uffd1\055\uffd1\001\002\000\026\024" +
    "\uffcd\027\uffcd\030\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\054\uffcd\055\uffcd\001\002\000\026\024\uffd2\027" +
    "\uffd2\030\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\054\uffd2\055\uffd2\001\002\000\026\024\uffcb\027\uffcb\030" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\054\uffcb" +
    "\055\uffcb\001\002\000\026\024\uffcc\027\uffcc\030\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\054\uffcc\055\uffcc" +
    "\001\002\000\026\024\uffcf\027\uffcf\030\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\054\uffcf\055\uffcf\001\002" +
    "\000\026\024\uffce\027\uffce\030\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\054\uffce\055\uffce\001\002\000\004" +
    "\005\304\001\002\000\026\024\uffd4\027\uffd4\030\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\054\uffd4\055\uffd4" +
    "\001\002\000\004\005\302\001\002\000\004\012\303\001" +
    "\002\000\004\055\uffd6\001\002\000\004\012\305\001\002" +
    "\000\004\055\uffd5\001\002\000\004\055\uffe9\001\002\000" +
    "\024\027\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b\043\uff9b" +
    "\044\uff9b\054\uff9b\055\uff9b\001\002\000\024\027\uff9d\030" +
    "\uff9d\031\uff9d\032\uff9d\034\uff9d\043\uff9d\044\uff9d\054\uff9d" +
    "\055\uff9d\001\002\000\024\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\034\uff9e\043\uff9e\044\uff9e\054\uff9e\055\uff9e\001\002" +
    "\000\024\027\062\030\060\031\063\032\061\034\134\043" +
    "\163\044\316\054\323\055\324\001\002\000\024\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\034\uff9a\043\uff9a\044\uff9a\054" +
    "\uff9a\055\uff9a\001\002\000\024\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\034\uffa0\043\uffa0\044\uffa0\054\uffa0\055\uffa0\001" +
    "\002\000\024\027\uff99\030\uff99\031\uff99\032\uff99\034\uff99" +
    "\043\uff99\044\uff99\054\uff99\055\uff99\001\002\000\004\006" +
    "\321\001\002\000\024\027\uff9f\030\uff9f\031\uff9f\032\uff9f" +
    "\034\uff9f\043\uff9f\044\uff9f\054\uff9f\055\uff9f\001\002\000" +
    "\024\027\uff9c\030\uff9c\031\uff9c\032\uff9c\034\uff9c\043\uff9c" +
    "\044\uff9c\054\uff9c\055\uff9c\001\002\000\004\053\322\001" +
    "\002\000\024\027\uff70\030\uff70\031\uff70\032\uff70\034\uff70" +
    "\043\uff70\044\uff70\054\uff70\055\uff70\001\002\000\004\005" +
    "\334\001\002\000\006\005\327\012\114\001\002\000\024" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\043\uffa1\044" +
    "\uffa1\054\uffa1\055\uffa1\001\002\000\004\055\331\001\002" +
    "\000\004\020\330\001\002\000\004\055\uffa4\001\002\000" +
    "\004\005\332\001\002\000\004\020\333\001\002\000\004" +
    "\055\uffa2\001\002\000\004\020\335\001\002\000\004\055" +
    "\uffa3\001\002\000\024\027\uff8f\030\uff8f\031\uff8f\032\uff8f" +
    "\034\uff8f\043\uff8f\044\uff8f\054\uff8f\055\uff8f\001\002\000" +
    "\024\027\uff91\030\uff91\031\uff91\032\uff91\034\uff91\043\uff91" +
    "\044\uff91\054\uff91\055\uff91\001\002\000\024\027\uff92\030" +
    "\uff92\031\uff92\032\uff92\034\uff92\043\uff92\044\uff92\054\uff92" +
    "\055\uff92\001\002\000\024\027\062\030\060\031\063\032" +
    "\061\034\134\043\163\044\316\054\347\055\350\001\002" +
    "\000\024\027\uff8d\030\uff8d\031\uff8d\032\uff8d\034\uff8d\043" +
    "\uff8d\044\uff8d\054\uff8d\055\uff8d\001\002\000\024\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\034\uff94\043\uff94\044\uff94\054" +
    "\uff94\055\uff94\001\002\000\024\027\uff8e\030\uff8e\031\uff8e" +
    "\032\uff8e\034\uff8e\043\uff8e\044\uff8e\054\uff8e\055\uff8e\001" +
    "\002\000\024\027\uff93\030\uff93\031\uff93\032\uff93\034\uff93" +
    "\043\uff93\044\uff93\054\uff93\055\uff93\001\002\000\024\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\034\uff90\043\uff90\044\uff90" +
    "\054\uff90\055\uff90\001\002\000\004\005\360\001\002\000" +
    "\006\005\353\012\114\001\002\000\024\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\034\uff95\043\uff95\044\uff95\054\uff95\055" +
    "\uff95\001\002\000\004\055\355\001\002\000\004\021\354" +
    "\001\002\000\004\055\uff98\001\002\000\004\005\356\001" +
    "\002\000\004\021\357\001\002\000\004\055\uff96\001\002" +
    "\000\004\021\361\001\002\000\004\055\uff97\001\002\000" +
    "\006\051\363\052\364\001\002\000\022\022\uff7f\024\uff7f" +
    "\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\055\uff7f\001" +
    "\002\000\022\022\uff7e\024\uff7e\027\uff7e\030\uff7e\031\uff7e" +
    "\032\uff7e\033\uff7e\055\uff7e\001\002\000\004\011\366\001" +
    "\002\000\004\055\uffe7\001\002\000\004\057\370\001\002" +
    "\000\016\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\055" +
    "\uff88\001\002\000\004\053\372\001\002\000\030\022\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\055\uff8c\001\002\000\004\053\374" +
    "\001\002\000\052\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\054\uff8a\055\uff8a\001\002\000\004\057\376\001\002" +
    "\000\016\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\055" +
    "\uff89\001\002\000\004\053\u0100\001\002\000\052\022\uff8b" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\032\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\045\uff8b\046\uff8b\055\uff8b\001" +
    "\002\000\004\005\u0102\001\002\000\004\007\u0103\001\002" +
    "\000\006\055\ufff8\056\ufff8\001\002\000\004\010\u0105\001" +
    "\002\000\006\055\ufff3\056\ufff3\001\002\000\010\003\012" +
    "\007\013\010\014\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\ufffb\001\002\000\006\055\ufffa\056\ufffa\001\002" +
    "\000\006\055\017\056\u010b\001\002\000\004\002\ufffc\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\010\002\006\003\004\004\003\001\001\000" +
    "\004\006\u0106\001\001\000\002\001\001\000\010\005\014" +
    "\007\015\010\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\032\034\045\026\046\031\047\033\050\022\051" +
    "\024\052\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\045\035\046\031\047" +
    "\033\050\022\051\024\052\021\001\001\000\002\001\001" +
    "\000\006\011\043\012\042\001\001\000\002\001\001\000" +
    "\024\031\053\040\064\046\063\050\051\053\056\054\055" +
    "\055\066\056\054\057\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\040\104\046\063\050\051\053\056\054\055\055\066\056" +
    "\054\057\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\117\014\106\015" +
    "\110\016\116\025\114\026\105\027\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\030" +
    "\340\037\342\053\337\054\336\055\345\056\335\060\344" +
    "\067\343\070\341\001\001\000\002\001\001\000\024\034" +
    "\311\042\313\053\310\054\307\055\317\056\306\060\316" +
    "\067\314\070\312\001\001\000\002\001\001\000\026\036" +
    "\265\044\264\050\270\053\267\054\266\060\271\061\274" +
    "\062\275\063\273\064\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\033\156\041\165\047\164\050\161\053\155\054\153\055" +
    "\171\056\170\060\167\061\176\062\177\063\174\064\172" +
    "\065\163\066\173\067\157\001\001\000\026\035\126\043" +
    "\135\047\127\053\124\054\123\055\132\056\131\060\130" +
    "\071\136\072\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\043\142" +
    "\047\127\053\124\054\123\055\132\056\131\060\130\071" +
    "\136\072\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\041\220\047\164\050" +
    "\161\053\155\054\153\055\171\056\170\060\167\061\176" +
    "\062\177\063\174\064\172\065\163\066\173\067\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\221\020\224\021\225\024\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\231\023\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\251\021\225\024\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\261\015" +
    "\110\016\116\025\114\026\105\027\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\044\277\050\270\053\267\054\266\060\271" +
    "\061\274\062\275\063\273\064\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\042\324\053" +
    "\310\054\307\055\317\056\306\060\316\067\314\070\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\037\350\053\337\054\336\055\345\056\335" +
    "\060\344\067\343\070\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\351\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\u0108\007\u0109\010\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$gxmlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$gxmlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$gxmlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static AstGxml Syntax_tree = null;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s) {
        StringBuilder m = new StringBuilder("Error Sintactico");
        int yline = s.left, ycol = s.right;

        if(s.left >= 0) {
        	m.append(" en la Linea " + (s.left));
        	if(s.right >= 0) {
        		m.append(" Columna " + (s.right));
        	}
        	m.append(". No se esperaba este componente: " + s.value + ".");
        }

        Object valor = (s.value != null)? s.value: "Fin de archivo";
            otros.Error err = new otros.Error(Constante.GXML, Constante.SINTACTICO, "", Constante.ent_temporal.ambito, " No se esperaba este componente: " + valor, Constante.archivo, s.left, s.right);
            otros.Error.agregarError(err);

        //Constante.consola += String.valueOf(m) + "\n";
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        syntax_error(s);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$gxmlParser$actions {
  private final gxmlParser parser;

  /** Constructor */
  CUP$gxmlParser$actions(gxmlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$gxmlParser$do_action_part00000000(
    int                        CUP$gxmlParser$act_num,
    java_cup.runtime.lr_parser CUP$gxmlParser$parser,
    java.util.Stack            CUP$gxmlParser$stack,
    int                        CUP$gxmlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$gxmlParser$result;

      /* select the action based on the action number */
      switch (CUP$gxmlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		RESULT = start_val;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$gxmlParser$parser.done_parsing();
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INIT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		AstGxml n = (AstGxml)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		Syntax_tree=n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              Object RESULT =null;
		Syntax_tree=null;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INIT ::= IMPORTACIONES IMPORTS 
            {
              AstGxml RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Importar> n1 = (LinkedList<Importar>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		LinkedList<Ventana> n = (LinkedList<Ventana>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new AstGxml(n1, n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INIT ::= open VENTANAS fin 
            {
              AstGxml RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Ventana> n1 = (LinkedList<Ventana>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		RESULT = new AstGxml(n1);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INIT",1, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= nada VENTANAS fin 
            {
              LinkedList<Ventana> RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Ventana> n2 = (LinkedList<Ventana>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		RESULT = n2;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("IMPORTS",4, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTS ::= fin 
            {
              LinkedList<Ventana> RESULT =null;
		RESULT = null;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("IMPORTS",4, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTACIONES ::= IMPORTACIONES nada IMPORTAR 
            {
              LinkedList<Importar> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		LinkedList<Importar> l = (LinkedList<Importar>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Importar n = (Importar)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",2, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTACIONES ::= open IMPORTAR 
            {
              LinkedList<Importar> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Importar n = (Importar)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Importar>(); RESULT.add(n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",2, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // IMPORTAR ::= pr_importar todo slash pr_importar 
            {
              Importar RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		RESULT = new Importar(n, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VENTANAS ::= VENTANAS nada VENTANA 
            {
              LinkedList<Ventana> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		LinkedList<Ventana> l = (LinkedList<Ventana>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Ventana n = (Ventana)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; if(n != null) { RESULT.add(n); }
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("VENTANAS",5, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VENTANAS ::= VENTANA 
            {
              LinkedList<Ventana> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Ventana n = (Ventana)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Ventana>(); if(n != null) { RESULT.add(n); }
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("VENTANAS",5, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VENTANA ::= pr_ventana ELEMENTOS_VENTANA nada CONTENEDORES nada slash pr_ventana 
            {
              Ventana RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).right;
		LinkedList<Elemento> n1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Contenedor> n2 = (LinkedList<Contenedor>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Ventana(n1, n2, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("VENTANA",6, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VENTANA ::= pr_ventana ELEMENTOS_VENTANA nada slash pr_ventana 
            {
              Ventana RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> n1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Ventana(n1, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("VENTANA",6, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VENTANA ::= error slash pr_ventana 
            {
              Ventana RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("VENTANA",6, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTOS_VENTANA ::= ELEMENTOS_VENTANA ELEMENTO_VENTANA 
            {
              LinkedList<Elemento> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Elemento> l = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",24, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTOS_VENTANA ::= ELEMENTO_VENTANA 
            {
              LinkedList<Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Elemento>(); RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANA",24, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO_VENTANA ::= ID 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",35, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTO_VENTANA ::= TIPO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",35, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTO_VENTANA ::= COLOR 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",35, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTO_VENTANA ::= ACCIONINI 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",35, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTO_VENTANA ::= ACCIONFIN 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",35, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENEDORES ::= CONTENEDORES nada CONTENEDOR 
            {
              LinkedList<Contenedor> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		LinkedList<Contenedor> l = (LinkedList<Contenedor>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Contenedor n = (Contenedor)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; if(n != null) { RESULT.add(n); }
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",7, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENEDORES ::= CONTENEDOR 
            {
              LinkedList<Contenedor> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Contenedor n = (Contenedor)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Contenedor>(); if(n != null) { RESULT.add(n); }
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",7, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENEDOR ::= pr_contenedor ELEMENTOS_CONTENEDOR nada slash pr_contenedor 
            {
              Contenedor RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> n1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Contenedor(n1, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENEDOR ::= pr_contenedor ELEMENTOS_CONTENEDOR nada INSTRUCCIONES nada slash pr_contenedor 
            {
              Contenedor RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).right;
		LinkedList<Elemento> n1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Ejecutar> n2 = (LinkedList<Ejecutar>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Contenedor(n1, n2, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENEDOR ::= error slash pr_contenedor 
            {
              Contenedor RESULT =null;

              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELEMENTOS_CONTENEDOR ::= ELEMENTOS_CONTENEDOR ELEMENTO_CONTENEDOR 
            {
              LinkedList<Elemento> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Elemento> l = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",23, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELEMENTOS_CONTENEDOR ::= ELEMENTO_CONTENEDOR 
            {
              LinkedList<Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Elemento>(); RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDOR",23, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELEMENTO_CONTENEDOR ::= ID 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELEMENTO_CONTENEDOR ::= X 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELEMENTO_CONTENEDOR ::= Y 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELEMENTO_CONTENEDOR ::= ALTO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELEMENTO_CONTENEDOR ::= ANCHO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELEMENTO_CONTENEDOR ::= COLOR 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELEMENTO_CONTENEDOR ::= BORDE 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",30, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INSTRUCCIONES ::= INSTRUCCIONES nada INSTRUCCION 
            {
              LinkedList<Ejecutar> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		LinkedList<Ejecutar> l = (LinkedList<Ejecutar>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Ejecutar n = (Ejecutar)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",9, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Ejecutar> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Ejecutar n = (Ejecutar)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Ejecutar>(); RESULT.add(n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",9, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= TEXTO 
            {
              Ejecutar RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Texto n = (Texto)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= MULTIMEDIA 
            {
              Ejecutar RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Multimedia n = (Multimedia)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= BOTON 
            {
              Ejecutar RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Boton n = (Boton)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= ENVIAR 
            {
              Ejecutar RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Enviar n = (Enviar)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= CONTROLADOR 
            {
              Ejecutar RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Controlador n = (Controlador)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",10, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TEXTO ::= pr_texto ELEMENTOS_TEXTO todo slash pr_texto 
            {
              Texto RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> n1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		RESULT = new Texto(n1, n2, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("TEXTO",11, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TEXTO ::= pr_texto ELEMENTOS_TEXTO nada slash pr_texto 
            {
              Texto RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> n1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Texto(n1, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("TEXTO",11, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTOS_TEXTO ::= ELEMENTOS_TEXTO ELEMENTO_TEXTO 
            {
              LinkedList<Elemento> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Elemento> l = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTO",28, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTOS_TEXTO ::= ELEMENTO_TEXTO 
            {
              LinkedList<Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Elemento>(); RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTO",28, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTO_TEXTO ::= NOMBRE 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",34, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTO_TEXTO ::= X 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",34, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTO_TEXTO ::= Y 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",34, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTO_TEXTO ::= FUENTE 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",34, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTO_TEXTO ::= TAM 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",34, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO_TEXTO ::= COLOR 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",34, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO_TEXTO ::= NEGRITA 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",34, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO_TEXTO ::= CURSIVA 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",34, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTROLADOR ::= pr_control ELEMENTOS_CONTROLADOR nada ESPECIALES nada slash pr_control 
            {
              Controlador RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).right;
		LinkedList<Elemento> n1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Especial> n2 = (LinkedList<Especial>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Controlador(n1, n2, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",12, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTROLADOR ::= pr_control ELEMENTOS_CONTROLADOR nada slash pr_control 
            {
              Controlador RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> n1 = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Controlador(n1, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CONTROLADOR",12, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTOS_CONTROLADOR ::= ELEMENTOS_CONTROLADOR ELEMENTO_CONTROLADOR 
            {
              LinkedList<Elemento> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Elemento> l = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLADOR",25, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTOS_CONTROLADOR ::= ELEMENTO_CONTROLADOR 
            {
              LinkedList<Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Elemento>(); RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLADOR",25, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTO_CONTROLADOR ::= TIPO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTO_CONTROLADOR ::= NOMBRE 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEMENTO_CONTROLADOR ::= X 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEMENTO_CONTROLADOR ::= Y 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTO_CONTROLADOR ::= ALTO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTO_CONTROLADOR ::= ANCHO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELEMENTO_CONTROLADOR ::= FUENTE 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELEMENTO_CONTROLADOR ::= TAM 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELEMENTO_CONTROLADOR ::= COLOR 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELEMENTO_CONTROLADOR ::= NEGRITA 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELEMENTO_CONTROLADOR ::= CURSIVA 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELEMENTO_CONTROLADOR ::= MAXIMO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELEMENTO_CONTROLADOR ::= MINIMO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELEMENTO_CONTROLADOR ::= ACCION 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROLADOR",31, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ESPECIALES ::= ESPECIALES nada ESPECIAL 
            {
              LinkedList<Especial> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		LinkedList<Especial> l = (LinkedList<Especial>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Especial n = (Especial)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ESPECIALES",13, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ESPECIALES ::= ESPECIAL 
            {
              LinkedList<Especial> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Especial n = (Especial)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Especial>(); RESULT.add(n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ESPECIALES",13, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ESPECIAL ::= LISTA_DATO 
            {
              Especial RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		ListaDato n = (ListaDato)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",14, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ESPECIAL ::= DEFECTO 
            {
              Especial RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Defecto n = (Defecto)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ESPECIAL",14, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTA_DATO ::= pr_listadato nada DATOS nada slash pr_listadato 
            {
              ListaDato RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new ListaDato(n, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("LISTA_DATO",15, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DATOS ::= DATOS nada DATO 
            {
              LinkedList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		LinkedList<String> l = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DATOS",16, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DATOS ::= DATO 
            {
              LinkedList<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<String>(); RESULT.add(n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DATOS",16, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DATO ::= pr_dato todo slash pr_dato 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DATO",17, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DEFECTO ::= pr_defecto todo slash pr_defecto 
            {
              Defecto RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		RESULT = new Defecto(n);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("DEFECTO",18, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MULTIMEDIA ::= pr_multimedia ELEMENTOS_MULTIMEDIA nada slash pr_multimedia 
            {
              Multimedia RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> n = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Multimedia(n, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MULTIMEDIA",19, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELEMENTOS_MULTIMEDIA ::= ELEMENTOS_MULTIMEDIA ELEMENTO_MULTIMEDIA 
            {
              LinkedList<Elemento> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Elemento> l = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELEMENTOS_MULTIMEDIA ::= ELEMENTO_MULTIMEDIA 
            {
              LinkedList<Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Elemento>(); RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIA",27, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELEMENTO_MULTIMEDIA ::= PATH 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTO_MULTIMEDIA ::= TIPO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTO_MULTIMEDIA ::= NOMBRE 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTO_MULTIMEDIA ::= X 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTO_MULTIMEDIA ::= Y 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELEMENTO_MULTIMEDIA ::= ALTO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTO_MULTIMEDIA ::= ANCHO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELEMENTO_MULTIMEDIA ::= AUTO_REPRODUCCION 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",33, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BOTON ::= pr_boton ELEMENTOS_BOTON nada slash pr_boton 
            {
              Boton RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> e = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		RESULT = new Boton(e, "", pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("BOTON",20, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BOTON ::= pr_boton ELEMENTOS_BOTON todo slash pr_boton 
            {
              Boton RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> e = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		RESULT = new Boton(e, c, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("BOTON",20, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BOTON ::= pr_boton ELEMENTOS_BOTON nada TEXTO nada slash pr_boton 
            {
              Boton RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).right;
		LinkedList<Elemento> e = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		Texto t = (Texto)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Boton(e, t, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("BOTON",20, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELEMENTOS_BOTON ::= ELEMENTOS_BOTON ELEMENTO_BOTON 
            {
              LinkedList<Elemento> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Elemento> l = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTON",26, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELEMENTOS_BOTON ::= ELEMENTO_BOTON 
            {
              LinkedList<Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Elemento>(); RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTON",26, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELEMENTO_BOTON ::= NOMBRE 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",32, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMENTO_BOTON ::= X 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",32, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMENTO_BOTON ::= Y 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",32, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELEMENTO_BOTON ::= ALTO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",32, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELEMENTO_BOTON ::= ANCHO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",32, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELEMENTO_BOTON ::= REFERENCIA 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",32, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELEMENTO_BOTON ::= ACCION 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",32, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ENVIAR ::= pr_enviar ELEMENTOS_ENVIAR nada slash pr_enviar 
            {
              Enviar RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> e = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		RESULT = new Enviar(e, "", pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ENVIAR",21, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ENVIAR ::= pr_enviar ELEMENTOS_ENVIAR todo slash pr_enviar 
            {
              Enviar RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		LinkedList<Elemento> e = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		RESULT = new Enviar(e, c, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ENVIAR",21, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ENVIAR ::= pr_enviar ELEMENTOS_ENVIAR nada TEXTO nada slash pr_enviar 
            {
              Enviar RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).right;
		LinkedList<Elemento> e = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).right;
		Texto t = (Texto)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-3)).value;
		RESULT = new Enviar(e, t, pleft, pright);
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ENVIAR",21, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-6)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELEMENTOS_ENVIAR ::= ELEMENTOS_ENVIAR ELEMENTO_ENVIAR 
            {
              LinkedList<Elemento> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		LinkedList<Elemento> l = (LinkedList<Elemento>)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = l; RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",22, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELEMENTOS_ENVIAR ::= ELEMENTO_ENVIAR 
            {
              LinkedList<Elemento> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = new LinkedList<Elemento>(); RESULT.add(n); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",22, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELEMENTO_ENVIAR ::= NOMBRE 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",29, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELEMENTO_ENVIAR ::= X 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",29, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELEMENTO_ENVIAR ::= Y 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",29, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELEMENTO_ENVIAR ::= ALTO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",29, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ELEMENTO_ENVIAR ::= ANCHO 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",29, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELEMENTO_ENVIAR ::= ACCION 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",29, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELEMENTO_ENVIAR ::= REFERENCIA 
            {
              Elemento RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		Elemento n = (Elemento)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		RESULT = n;
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",29, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ID ::= pr_id igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ID",36, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO ::= pr_tipo igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("TIPO",37, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COLOR ::= pr_color igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("COLOR",38, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ACCIONINI ::= pr_accioninicial igual llamada 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ACCIONINI",39, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ACCIONFIN ::= pr_accionfinal igual llamada 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ACCIONFIN",40, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // X ::= pr_x igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("X",41, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // X ::= pr_x igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("X",41, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Y ::= pr_y igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("Y",42, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Y ::= pr_y igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("Y",42, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ALTO ::= pr_alto igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ALTO",43, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ALTO ::= pr_alto igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ALTO",43, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ANCHO ::= pr_ancho igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ANCHO",44, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ANCHO ::= pr_ancho igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ANCHO",44, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // BORDE ::= pr_borde igual pr_verdadero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("BORDE",45, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // BORDE ::= pr_borde igual pr_falso 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("BORDE",45, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NOMBRE ::= pr_nombre igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("NOMBRE",46, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FUENTE ::= pr_fuente igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("FUENTE",47, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TAM ::= pr_tam igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("TAM",48, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TAM ::= pr_tam igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("TAM",48, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NEGRITA ::= pr_negrita igual pr_verdadero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("NEGRITA",49, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NEGRITA ::= pr_negrita igual pr_falso 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("NEGRITA",49, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CURSIVA ::= pr_cursiva igual pr_verdadero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CURSIVA",50, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CURSIVA ::= pr_cursiva igual pr_falso 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("CURSIVA",50, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // MAXIMO ::= pr_maximo igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MAXIMO",51, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // MAXIMO ::= pr_maximo igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MAXIMO",51, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // MINIMO ::= pr_minimo igual entero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.ENTERO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MINIMO",52, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // MINIMO ::= pr_minimo igual decimal 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.DECIMAL, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("MINIMO",52, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ACCION ::= pr_accion igual llamada 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("ACCION",53, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // REFERENCIA ::= pr_referencia igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("REFERENCIA",54, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PATH ::= pr_path igual cadena 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.CADENA, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("PATH",55, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // AUTO_REPRODUCCION ::= pr_autoreproduccion igual pr_verdadero 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("AUTO_REPRODUCCION",56, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // AUTO_REPRODUCCION ::= pr_autoreproduccion igual pr_falso 
            {
              Elemento RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$gxmlParser$stack.peek()).value;
		 RESULT = new Elemento(n1, Tipo.BOOLEANO, n3, n2left, n2right); 
              CUP$gxmlParser$result = parser.getSymbolFactory().newSymbol("AUTO_REPRODUCCION",56, ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.elementAt(CUP$gxmlParser$top-2)), ((java_cup.runtime.Symbol)CUP$gxmlParser$stack.peek()), RESULT);
            }
          return CUP$gxmlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$gxmlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$gxmlParser$do_action(
    int                        CUP$gxmlParser$act_num,
    java_cup.runtime.lr_parser CUP$gxmlParser$parser,
    java.util.Stack            CUP$gxmlParser$stack,
    int                        CUP$gxmlParser$top)
    throws java.lang.Exception
    {
              return CUP$gxmlParser$do_action_part00000000(
                               CUP$gxmlParser$act_num,
                               CUP$gxmlParser$parser,
                               CUP$gxmlParser$stack,
                               CUP$gxmlParser$top);
    }
}

}
