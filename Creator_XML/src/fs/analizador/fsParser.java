
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fs.analizador;

import java_cup.runtime.*;
import fs.arbol.Expresion.*;
import otros.Constante;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class fsParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public fsParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public fsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public fsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\024\002\uffff\021\011\044\004\115\013\116" +
    "\007\117\014\120\010\122\005\123\012\001\002\000\022" +
    "\021\011\044\004\115\013\116\007\117\014\120\010\122" +
    "\005\123\012\001\002\000\042\002\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\001\002\000\004\002\053\001\002\000\042\002\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\001\002\000\042\002\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec" +
    "\001\002\000\022\021\011\044\004\115\013\116\007\117" +
    "\014\120\010\122\005\123\012\001\002\000\042\002\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\001\002\000\042\002\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\001\002\000\042\002\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\001\002" +
    "\000\042\002\000\020\032\021\021\022\030\023\016\024" +
    "\026\025\034\026\027\034\033\035\023\036\017\037\031" +
    "\040\024\041\025\042\022\043\020\001\002\000\022\021" +
    "\011\044\004\115\013\116\007\117\014\120\010\122\005" +
    "\123\012\001\002\000\022\021\011\044\004\115\013\116" +
    "\007\117\014\120\010\122\005\123\012\001\002\000\022" +
    "\021\011\044\004\115\013\116\007\117\014\120\010\122" +
    "\005\123\012\001\002\000\022\021\011\044\004\115\013" +
    "\116\007\117\014\120\010\122\005\123\012\001\002\000" +
    "\022\021\011\044\004\115\013\116\007\117\014\120\010" +
    "\122\005\123\012\001\002\000\022\021\011\044\004\115" +
    "\013\116\007\117\014\120\010\122\005\123\012\001\002" +
    "\000\022\021\011\044\004\115\013\116\007\117\014\120" +
    "\010\122\005\123\012\001\002\000\022\021\011\044\004" +
    "\115\013\116\007\117\014\120\010\122\005\123\012\001" +
    "\002\000\022\021\011\044\004\115\013\116\007\117\014" +
    "\120\010\122\005\123\012\001\002\000\042\002\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\001\002\000\022\021\011\044\004\115\013" +
    "\116\007\117\014\120\010\122\005\123\012\001\002\000" +
    "\022\021\011\044\004\115\013\116\007\117\014\120\010" +
    "\122\005\123\012\001\002\000\022\021\011\044\004\115" +
    "\013\116\007\117\014\120\010\122\005\123\012\001\002" +
    "\000\022\021\011\044\004\115\013\116\007\117\014\120" +
    "\010\122\005\123\012\001\002\000\042\002\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\043\ufff9\001\002\000\042\002\ufff4\020\032\021\021\022" +
    "\030\023\016\024\026\025\034\026\027\034\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\001" +
    "\002\000\042\002\ufffe\020\ufffe\021\ufffe\022\030\023\016" +
    "\024\026\025\034\026\027\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\001\002\000\042" +
    "\002\ufff1\020\032\021\021\022\030\023\016\024\026\025" +
    "\034\026\027\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\001\002\000\042\002\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\024\026\025\034\026\027" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\001\002\000\042\002\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\023\ufffa\024\026\025\034\026\027\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\001\002\000\042\002\ufff5\020\032\021\021\022\030\023" +
    "\016\024\026\025\034\026\027\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\001\002\000" +
    "\042\002\ufff6\020\032\021\021\022\030\023\016\024\026" +
    "\025\034\026\027\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\001\002\000\042\002\ufff3" +
    "\020\032\021\021\022\030\023\016\024\026\025\034\026" +
    "\027\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\001\002\000\042\002\ufff0\020\032\021" +
    "\021\022\030\023\016\024\026\025\034\026\027\034\033" +
    "\035\023\036\017\037\031\040\024\041\025\042\ufff0\043" +
    "\020\001\002\000\042\002\ufffd\020\ufffd\021\ufffd\022\030" +
    "\023\016\024\026\025\034\026\027\034\ufffd\035\ufffd\036" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\001\002" +
    "\000\042\002\uffef\020\032\021\021\022\030\023\016\024" +
    "\026\025\034\026\027\034\033\035\023\036\017\037\031" +
    "\040\024\041\025\042\uffef\043\uffef\001\002\000\042\002" +
    "\ufff2\020\032\021\021\022\030\023\016\024\026\025\034" +
    "\026\027\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\001\002\000\042\002\ufffb\020\ufffb" +
    "\021\ufffb\022\ufffb\023\ufffb\024\026\025\034\026\027\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\001\002\000\042\002\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\034\ufff7\035\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\001" +
    "\002\000\004\002\001\001\002\000\042\002\uffee\020\032" +
    "\021\021\022\030\023\016\024\026\025\034\026\027\034" +
    "\033\035\023\036\017\037\031\040\024\041\025\042\uffee" +
    "\043\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\006\002\005\003\014\001\001\000\004\003" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\050\001\001\000\004\003\047\001" +
    "\001\000\004\003\046\001\001\000\004\003\045\001\001" +
    "\000\004\003\044\001\001\000\004\003\043\001\001\000" +
    "\004\003\042\001\001\000\004\003\041\001\001\000\004" +
    "\003\040\001\001\000\002\001\001\000\004\003\037\001" +
    "\001\000\004\003\036\001\001\000\004\003\035\001\001" +
    "\000\004\003\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$fsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$fsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$fsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s) {
        StringBuilder m = new StringBuilder("Error Sintactico");
        int yline = s.left, ycol = s.right;

        if(s.left >= 0) {
        	m.append(" en la Linea " + (s.left));
        	if(s.right >= 0) {
        		m.append(" Columna " + (s.right));
        	}
        	m.append(". No se esperaba este componente: " + s.value + ".");
        }
        System.out.println(m);
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        syntax_error(s);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$fsParser$actions {
  private final fsParser parser;

  /** Constructor */
  CUP$fsParser$actions(fsParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$fsParser$do_action_part00000000(
    int                        CUP$fsParser$act_num,
    java_cup.runtime.lr_parser CUP$fsParser$parser,
    java.util.Stack            CUP$fsParser$stack,
    int                        CUP$fsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$fsParser$result;

      /* select the action based on the action number */
      switch (CUP$fsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = start_val;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$fsParser$parser.done_parsing();
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= EXP 
            {
              Object RESULT =null;

              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              Object RESULT =null;

              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EXP ::= EXP mas EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.MAS, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP ::= EXP menos EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.MENOS, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP ::= EXP por EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.POR, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP ::= EXP div EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.DIV, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP ::= EXP pot EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.POT, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // EXP ::= EXP masmas 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Operacion n = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n, Operador.MASMAS, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXP ::= EXP menmen 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Operacion n = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n, Operador.MENMEN, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXP ::= menos EXP 
            {
              Operacion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n, Operador.MENOS, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXP ::= EXP igualigual EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.IGUALIGUAL, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXP ::= EXP diferente EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.DIFERENTE, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= EXP mayor EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.MAYOR, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= EXP menor EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.MENOR, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= EXP mayorigual EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.MAYORIGUAL, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= EXP menorigual EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.MENORIGUAL, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= EXP and EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Logica(n1, n2, Operador.AND, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= EXP or EXP 
            {
              Operacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operacion n1 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n2 = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Logica(n1, n2, Operador.OR, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= not EXP 
            {
              Operacion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Operacion n = (Operacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Logica(n, Operador.NOT, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= entero 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Constante.ENTERO, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= decimal 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Constante.DECIMAL, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXP ::= cadena 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Constante.CADENA, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXP ::= caracter 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Constante.CARACTER, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= pr_verdadero 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Constante.BOOLEANO, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= pr_falso 
            {
              Operacion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Constante.BOOLEANO, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$fsParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$fsParser$do_action(
    int                        CUP$fsParser$act_num,
    java_cup.runtime.lr_parser CUP$fsParser$parser,
    java.util.Stack            CUP$fsParser$stack,
    int                        CUP$fsParser$top)
    throws java.lang.Exception
    {
              return CUP$fsParser$do_action_part00000000(
                               CUP$fsParser$act_num,
                               CUP$fsParser$parser,
                               CUP$fsParser$stack,
                               CUP$fsParser$top);
    }
}

}
