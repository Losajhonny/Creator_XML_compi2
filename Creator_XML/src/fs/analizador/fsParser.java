
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fs.analizador;

import entorno.Entorno;
import java_cup.runtime.*;
import fs.arbol.AstFs;
import fs.arbol.Expresion.*;
import fs.arbol.Expresion.Operaciones.*;
import fs.arbol.Expresion.Operaciones.Operacion.Operador;
import fs.arbol.Expresion.Operaciones.Operacion.Tipo;
import fs.arbol.Importacion;
import fs.arbol.Instruccion.*;
import fs.arbol.Instruccion.Seleccion.*;
import fs.arbol.Instruccion.Declaracion.*;
import fs.arbol.Instruccion.Funcion.*;
import fs.arbol.Instruccion.FuncionArreglo.*;
import fs.arbol.Instruccion.FuncionInterfaz.*;
import otros.Constante;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class fsParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public fsParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public fsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public fsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\256\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\006\004\000\002\006\003\000\002\006\003" +
    "\000\002\046\004\000\002\046\003\000\002\007\007\000" +
    "\002\045\004\000\002\045\003\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\032\005\000\002\032\006\000\002" +
    "\032\006\000\002\032\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\010\000\002\005\006\000\002\005\005" +
    "\000\002\005\005\000\002\005\006\000\002\005\005\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\044\011\000\002\044\007\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\031\004\000\002\031\006\000\002\052\005\000\002\052" +
    "\004\000\002\030\005\000\002\030\005\000\002\030\006" +
    "\000\002\030\006\000\002\030\006\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\027\006\000\002" +
    "\027\005\000\002\022\012\000\002\022\011\000\002\022" +
    "\011\000\002\022\010\000\002\056\005\000\002\056\003" +
    "\000\002\021\004\000\002\054\004\000\002\054\003\000" +
    "\002\033\004\000\002\033\004\000\002\033\004\000\002" +
    "\033\004\000\002\033\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\004\000\002\033\004\000" +
    "\002\043\011\000\002\043\012\000\002\047\004\000\002" +
    "\047\003\000\002\017\010\000\002\017\007\000\002\020" +
    "\007\000\002\020\006\000\002\041\005\000\002\041\004" +
    "\000\002\041\004\000\002\041\003\000\002\010\011\000" +
    "\002\010\010\000\002\055\004\000\002\055\003\000\002" +
    "\011\012\000\002\011\011\000\002\042\006\000\002\042" +
    "\005\000\002\026\007\000\002\037\003\000\002\040\004" +
    "\000\002\040\003\000\002\036\006\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\007\000\002" +
    "\035\007\000\002\035\012\000\002\035\010\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\034\006\000\002\034\006\000" +
    "\002\034\006\000\002\034\004\000\002\013\005\000\002" +
    "\013\004\000\002\051\005\000\002\051\003\000\002\014" +
    "\005\000\002\053\005\000\002\053\003\000\002\012\005" +
    "\000\002\003\003\000\002\003\005\000\002\050\005\000" +
    "\002\050\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\005" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\005\000\002\023\010\000\002\023\006" +
    "\000\002\024\005\000\002\024\005\000\002\024\004\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\032\002\uffff\003\033\045\005\046\006\047" +
    "\023\052\035\055\021\057\004\062\034\074\017\100\013" +
    "\123\025\001\002\000\004\123\u0174\001\002\000\004\123" +
    "\u016d\001\002\000\004\010\u0168\001\002\000\004\002\u0167" +
    "\001\002\000\030\002\ufffd\003\033\045\005\047\023\052" +
    "\035\055\021\057\004\062\034\074\017\100\013\123\025" +
    "\001\002\000\030\002\ufff2\003\ufff2\045\ufff2\047\ufff2\052" +
    "\ufff2\055\ufff2\057\ufff2\062\ufff2\074\ufff2\100\ufff2\123\ufff2" +
    "\001\002\000\004\013\u0166\001\002\000\004\010\u0163\001" +
    "\002\000\004\013\u0162\001\002\000\032\002\ufffa\003\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\052\ufffa\055\ufffa\057\ufffa\062" +
    "\ufffa\074\ufffa\100\ufffa\123\ufffa\001\002\000\004\013\u0161" +
    "\001\002\000\004\010\u015e\001\002\000\004\013\u015d\001" +
    "\002\000\004\010\u0156\001\002\000\004\013\u0155\001\002" +
    "\000\004\010\u0152\001\002\000\040\002\uff9f\003\uff9f\005" +
    "\uff9f\045\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\055\uff9f" +
    "\056\u0141\057\uff9f\062\uff9f\074\uff9f\100\uff9f\123\uff9f\001" +
    "\002\000\022\006\u010d\010\126\012\u0111\017\u0114\030\u0110" +
    "\031\u0112\032\u010e\033\u010f\001\002\000\004\013\u010c\001" +
    "\002\000\032\002\ufffc\003\033\045\005\046\006\047\023" +
    "\052\035\055\021\057\004\062\034\074\017\100\013\123" +
    "\025\001\002\000\030\002\ufff7\003\ufff7\045\ufff7\047\ufff7" +
    "\052\ufff7\055\ufff7\057\ufff7\062\ufff7\074\ufff7\100\ufff7\123" +
    "\ufff7\001\002\000\004\013\u0108\001\002\000\030\002\ufff3" +
    "\003\ufff3\045\ufff3\047\ufff3\052\ufff3\055\ufff3\057\ufff3\062" +
    "\ufff3\074\ufff3\100\ufff3\123\ufff3\001\002\000\006\005\u0106" +
    "\013\u0107\001\002\000\004\010\u0103\001\002\000\004\010" +
    "\040\001\002\000\030\002\ufff1\003\ufff1\045\ufff1\047\ufff1" +
    "\052\ufff1\055\ufff1\057\ufff1\062\ufff1\074\ufff1\100\ufff1\123" +
    "\ufff1\001\002\000\004\002\000\001\002\000\034\010\060" +
    "\021\050\044\045\062\034\074\017\100\013\116\041\117" +
    "\042\120\057\121\056\122\044\123\053\124\043\001\002" +
    "\000\056\005\uff5b\007\uff5b\011\uff5b\013\uff5b\014\uff5b\015" +
    "\uff5b\016\uff5b\020\uff5b\021\uff5b\022\uff5b\023\uff5b\024\uff5b" +
    "\025\uff5b\026\uff5b\034\uff5b\035\uff5b\036\uff5b\037\uff5b\040" +
    "\uff5b\041\uff5b\042\uff5b\043\uff5b\001\002\000\056\005\uff5a" +
    "\007\uff5a\011\uff5a\013\uff5a\014\uff5a\015\uff5a\016\uff5a\020" +
    "\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\025\uff5a\026\uff5a" +
    "\034\uff5a\035\uff5a\036\uff5a\037\uff5a\040\uff5a\041\uff5a\042" +
    "\uff5a\043\uff5a\001\002\000\056\005\uff65\007\uff65\011\uff65" +
    "\013\uff65\014\uff65\015\uff65\016\uff65\020\uff65\021\uff65\022" +
    "\uff65\023\uff65\024\uff65\025\uff65\026\uff65\034\uff65\035\uff65" +
    "\036\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043\uff65\001" +
    "\002\000\056\005\uff66\007\uff66\011\uff66\013\uff66\014\uff66" +
    "\015\uff66\016\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024" +
    "\uff66\025\uff66\026\uff66\034\uff66\035\uff66\036\uff66\037\uff66" +
    "\040\uff66\041\uff66\042\uff66\043\uff66\001\002\000\034\010" +
    "\060\021\050\044\045\062\034\074\017\100\013\116\041" +
    "\117\042\120\057\121\056\122\044\123\053\124\043\001" +
    "\002\000\056\005\uff68\007\uff68\011\uff68\013\uff68\014\uff68" +
    "\015\uff68\016\uff68\020\uff68\021\uff68\022\uff68\023\uff68\024" +
    "\uff68\025\uff68\026\uff68\034\uff68\035\uff68\036\uff68\037\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\001\002\000\044\011" +
    "\321\016\064\020\103\021\067\022\076\023\063\024\074" +
    "\025\102\026\075\034\101\035\072\036\065\037\077\040" +
    "\071\041\073\042\070\043\066\001\002\000\034\010\060" +
    "\021\050\044\045\062\034\074\017\100\013\116\041\117" +
    "\042\120\057\121\056\122\044\123\053\124\043\001\002" +
    "\000\056\005\uff5c\007\uff5c\011\uff5c\013\uff5c\014\uff5c\015" +
    "\uff5c\016\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024\uff5c" +
    "\025\uff5c\026\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040" +
    "\uff5c\041\uff5c\042\uff5c\043\uff5c\001\002\000\056\005\uff69" +
    "\007\uff69\011\uff69\013\uff69\014\uff69\015\uff69\016\uff69\020" +
    "\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69" +
    "\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041\uff69\042" +
    "\uff69\043\uff69\001\002\000\064\005\uff63\006\127\007\uff63" +
    "\010\126\011\uff63\012\124\013\uff63\014\uff63\015\uff63\016" +
    "\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\025\uff63" +
    "\026\uff63\034\uff63\035\uff63\036\uff63\037\uff63\040\uff63\041" +
    "\uff63\042\uff63\043\uff63\001\002\000\056\005\uff6a\007\uff6a" +
    "\011\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043" +
    "\uff6a\001\002\000\056\005\uff6b\007\uff6b\011\uff6b\013\uff6b" +
    "\014\uff6b\015\uff6b\016\uff6b\020\uff6b\021\uff6b\022\uff6b\023" +
    "\uff6b\024\uff6b\025\uff6b\026\uff6b\034\uff6b\035\uff6b\036\uff6b" +
    "\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\001\002\000" +
    "\056\005\uff67\007\uff67\011\uff67\013\uff67\014\uff67\015\uff67" +
    "\016\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67\025" +
    "\uff67\026\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67" +
    "\041\uff67\042\uff67\043\uff67\001\002\000\056\005\uff64\007" +
    "\uff64\011\uff64\013\uff64\014\uff64\015\uff64\016\uff64\020\uff64" +
    "\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\034" +
    "\uff64\035\uff64\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64" +
    "\043\uff64\001\002\000\034\010\060\021\050\044\045\062" +
    "\034\074\017\100\013\116\041\117\042\120\057\121\056" +
    "\122\044\123\053\124\043\001\002\000\056\005\uff6c\007" +
    "\uff6c\011\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\020\uff6c" +
    "\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\034" +
    "\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\001\002\000\044\011\100\016\064\020\103\021" +
    "\067\022\076\023\063\024\074\025\102\026\075\034\101" +
    "\035\072\036\065\037\077\040\071\041\073\042\070\043" +
    "\066\001\002\000\034\010\060\021\050\044\045\062\034" +
    "\074\017\100\013\116\041\117\042\120\057\121\056\122" +
    "\044\123\053\124\043\001\002\000\034\010\060\021\050" +
    "\044\045\062\034\074\017\100\013\116\041\117\042\120" +
    "\057\121\056\122\044\123\053\124\043\001\002\000\034" +
    "\010\060\021\050\044\045\062\034\074\017\100\013\116" +
    "\041\117\042\120\057\121\056\122\044\123\053\124\043" +
    "\001\002\000\034\010\060\021\050\044\045\062\034\074" +
    "\017\100\013\116\041\117\042\120\057\121\056\122\044" +
    "\123\053\124\043\001\002\000\034\010\060\021\050\044" +
    "\045\062\034\074\017\100\013\116\041\117\042\120\057" +
    "\121\056\122\044\123\053\124\043\001\002\000\034\010" +
    "\060\021\050\044\045\062\034\074\017\100\013\116\041" +
    "\117\042\120\057\121\056\122\044\123\053\124\043\001" +
    "\002\000\034\010\060\021\050\044\045\062\034\074\017" +
    "\100\013\116\041\117\042\120\057\121\056\122\044\123" +
    "\053\124\043\001\002\000\034\010\060\021\050\044\045" +
    "\062\034\074\017\100\013\116\041\117\042\120\057\121" +
    "\056\122\044\123\053\124\043\001\002\000\034\010\060" +
    "\021\050\044\045\062\034\074\017\100\013\116\041\117" +
    "\042\120\057\121\056\122\044\123\053\124\043\001\002" +
    "\000\034\010\060\021\050\044\045\062\034\074\017\100" +
    "\013\116\041\117\042\120\057\121\056\122\044\123\053" +
    "\124\043\001\002\000\056\005\uff6f\007\uff6f\011\uff6f\013" +
    "\uff6f\014\uff6f\015\uff6f\016\uff6f\020\uff6f\021\uff6f\022\uff6f" +
    "\023\uff6f\024\uff6f\025\uff6f\026\uff6f\034\uff6f\035\uff6f\036" +
    "\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\001\002" +
    "\000\034\010\060\021\050\044\045\062\034\074\017\100" +
    "\013\116\041\117\042\120\057\121\056\122\044\123\053" +
    "\124\043\001\002\000\034\010\060\021\050\044\045\062" +
    "\034\074\017\100\013\116\041\117\042\120\057\121\056" +
    "\122\044\123\053\124\043\001\002\000\056\005\uff6d\007" +
    "\uff6d\011\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d\020\uff6d" +
    "\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\026\uff6d\034" +
    "\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d" +
    "\043\uff6d\001\002\000\034\010\060\021\050\044\045\062" +
    "\034\074\017\100\013\116\041\117\042\120\057\121\056" +
    "\122\044\123\053\124\043\001\002\000\056\005\uff70\007" +
    "\uff70\011\uff70\013\uff70\014\uff70\015\uff70\016\uff70\020\uff70" +
    "\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70\034" +
    "\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042\uff70" +
    "\043\uff70\001\002\000\034\010\060\021\050\044\045\062" +
    "\034\074\017\100\013\116\041\117\042\120\057\121\056" +
    "\122\044\123\053\124\043\001\002\000\056\005\uff75\007" +
    "\uff75\011\uff75\013\uff75\014\uff75\015\uff75\016\uff75\020\uff75" +
    "\021\uff75\022\076\023\063\024\074\025\102\026\075\034" +
    "\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\001\002\000\056\005\uff57\007\uff57\011\uff57\013" +
    "\uff57\014\uff57\015\uff57\016\uff57\020\103\021\067\022\076" +
    "\023\063\024\074\025\102\026\075\034\uff57\035\uff57\036" +
    "\uff57\037\uff57\040\uff57\041\uff57\042\uff57\043\uff57\001\002" +
    "\000\056\005\uff54\007\uff54\011\uff54\013\uff54\014\uff54\015" +
    "\uff54\016\uff54\020\103\021\067\022\076\023\063\024\074" +
    "\025\102\026\075\034\uff54\035\uff54\036\uff54\037\uff54\040" +
    "\uff54\041\uff54\042\uff54\043\uff54\001\002\000\056\005\uff73" +
    "\007\uff73\011\uff73\013\uff73\014\uff73\015\uff73\016\uff73\020" +
    "\uff73\021\uff73\022\uff73\023\uff73\024\074\025\102\026\075" +
    "\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73\042" +
    "\uff73\043\uff73\001\002\000\056\005\uff71\007\uff71\011\uff71" +
    "\013\uff71\014\uff71\015\uff71\016\uff71\020\uff71\021\uff71\022" +
    "\uff71\023\uff71\024\074\025\102\026\075\034\uff71\035\uff71" +
    "\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043\uff71\001" +
    "\002\000\056\005\uff58\007\uff58\011\uff58\013\uff58\014\uff58" +
    "\015\uff58\016\uff58\020\103\021\067\022\076\023\063\024" +
    "\074\025\102\026\075\034\101\035\072\036\065\037\077" +
    "\040\uff58\041\uff58\042\uff58\043\uff58\001\002\000\056\005" +
    "\uff56\007\uff56\011\uff56\013\uff56\014\uff56\015\uff56\016\uff56" +
    "\020\103\021\067\022\076\023\063\024\074\025\102\026" +
    "\075\034\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56" +
    "\042\uff56\043\uff56\001\002\000\056\005\uff59\007\uff59\011" +
    "\uff59\013\uff59\014\uff59\015\uff59\016\uff59\020\103\021\067" +
    "\022\076\023\063\024\074\025\102\026\075\034\101\035" +
    "\072\036\065\037\077\040\uff59\041\uff59\042\uff59\043\uff59" +
    "\001\002\000\056\005\uff5f\007\uff5f\011\uff5f\013\uff5f\014" +
    "\uff5f\015\uff5f\016\uff5f\020\103\021\067\022\076\023\063" +
    "\024\074\025\102\026\075\034\101\035\072\036\065\037" +
    "\077\040\071\041\073\042\uff5f\043\uff5f\001\002\000\056" +
    "\005\uff74\007\uff74\011\uff74\013\uff74\014\uff74\015\uff74\016" +
    "\uff74\020\uff74\021\uff74\022\076\023\063\024\074\025\102" +
    "\026\075\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041" +
    "\uff74\042\uff74\043\uff74\001\002\000\056\005\uff5e\007\uff5e" +
    "\011\uff5e\013\uff5e\014\uff5e\015\uff5e\016\uff5e\020\103\021" +
    "\067\022\076\023\063\024\074\025\102\026\075\034\101" +
    "\035\072\036\065\037\077\040\071\041\073\042\070\043" +
    "\uff5e\001\002\000\056\005\uff55\007\uff55\011\uff55\013\uff55" +
    "\014\uff55\015\uff55\016\uff55\020\103\021\067\022\076\023" +
    "\063\024\074\025\102\026\075\034\uff55\035\uff55\036\uff55" +
    "\037\uff55\040\uff55\041\uff55\042\uff55\043\uff55\001\002\000" +
    "\044\014\121\016\064\020\103\021\067\022\076\023\063" +
    "\024\074\025\102\026\075\034\101\035\072\036\065\037" +
    "\077\040\071\041\073\042\070\043\066\001\002\000\034" +
    "\010\060\021\050\044\045\062\034\074\017\100\013\116" +
    "\041\117\042\120\057\121\056\122\044\123\053\124\043" +
    "\001\002\000\056\005\uff96\007\uff96\011\uff96\013\uff96\014" +
    "\uff96\015\uff96\016\064\020\103\021\067\022\076\023\063" +
    "\024\074\025\102\026\075\034\101\035\072\036\065\037" +
    "\077\040\071\041\073\042\070\043\066\001\002\000\056" +
    "\005\uff72\007\uff72\011\uff72\013\uff72\014\uff72\015\uff72\016" +
    "\uff72\020\uff72\021\uff72\022\uff72\023\uff72\024\074\025\102" +
    "\026\075\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041" +
    "\uff72\042\uff72\043\uff72\001\002\000\066\062\216\064\147" +
    "\065\145\066\144\067\141\070\150\071\146\072\151\073" +
    "\142\075\213\076\220\077\210\101\202\102\205\103\222" +
    "\104\212\105\211\106\221\107\223\110\203\111\207\112" +
    "\200\113\214\114\201\115\217\123\206\001\002\000\060" +
    "\005\uffce\007\uffce\011\uffce\012\140\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\001\002\000\036\010\060" +
    "\011\132\021\050\044\045\062\034\074\017\100\013\116" +
    "\041\117\042\120\057\121\056\122\044\123\053\124\043" +
    "\001\002\000\034\010\060\021\050\044\045\062\034\074" +
    "\017\100\013\116\041\117\042\120\057\121\056\122\044" +
    "\123\053\124\043\001\002\000\044\007\131\016\064\020" +
    "\103\021\067\022\076\023\063\024\074\025\102\026\075" +
    "\034\101\035\072\036\065\037\077\040\071\041\073\042" +
    "\070\043\066\001\002\000\056\005\uff60\007\uff60\011\uff60" +
    "\013\uff60\014\uff60\015\uff60\016\uff60\020\uff60\021\uff60\022" +
    "\uff60\023\uff60\024\uff60\025\uff60\026\uff60\034\uff60\035\uff60" +
    "\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60\001" +
    "\002\000\056\005\uffc1\007\uffc1\011\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\001\002\000\050\007" +
    "\uff7e\011\uff7e\015\uff7e\016\064\020\103\021\067\022\076" +
    "\023\063\024\074\025\102\026\075\034\101\035\072\036" +
    "\065\037\077\040\071\041\073\042\070\043\066\001\002" +
    "\000\006\011\136\015\135\001\002\000\034\010\060\021" +
    "\050\044\045\062\034\074\017\100\013\116\041\117\042" +
    "\120\057\121\056\122\044\123\053\124\043\001\002\000" +
    "\056\005\uffc2\007\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\001\002\000\050\007\uff7f\011" +
    "\uff7f\015\uff7f\016\064\020\103\021\067\022\076\023\063" +
    "\024\074\025\102\026\075\034\101\035\072\036\065\037" +
    "\077\040\071\041\073\042\070\043\066\001\002\000\022" +
    "\064\147\065\145\066\144\067\141\070\150\071\146\072" +
    "\151\073\142\001\002\000\004\010\175\001\002\000\004" +
    "\010\172\001\002\000\060\005\uffcc\007\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\001\002\000\004\010\167\001\002\000\004\010\165\001" +
    "\002\000\004\010\162\001\002\000\004\010\160\001\002" +
    "\000\004\010\155\001\002\000\004\010\152\001\002\000" +
    "\004\123\153\001\002\000\004\011\154\001\002\000\060" +
    "\005\uffc4\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\001\002\000\004\123\156" +
    "\001\002\000\004\011\157\001\002\000\060\005\uffc6\007" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\001\002\000\004\011\161\001\002\000" +
    "\060\005\uffca\007\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\026\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\001\002\000\004\123" +
    "\163\001\002\000\004\011\164\001\002\000\060\005\uffc5" +
    "\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\001\002\000\004\011\166\001\002" +
    "\000\060\005\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\001\002\000\004" +
    "\123\170\001\002\000\004\011\171\001\002\000\060\005" +
    "\uffc8\007\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\001\002\000\004\123\173\001" +
    "\002\000\004\011\174\001\002\000\060\005\uffc3\007\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\001\002\000\004\123\176\001\002\000\004" +
    "\011\177\001\002\000\060\005\uffc7\007\uffc7\011\uffc7\012" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\001\002\000\004\010\315\001\002\000\004\010\311\001" +
    "\002\000\004\010\306\001\002\000\004\010\303\001\002" +
    "\000\056\005\uffea\007\uffea\011\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\041\uffea\042\uffea\043\uffea\001\002\000\004\010\300" +
    "\001\002\000\062\005\uff62\006\275\007\uff62\011\uff62\012" +
    "\273\013\uff62\014\uff62\015\uff62\016\uff62\020\uff62\021\uff62" +
    "\022\uff62\023\uff62\024\uff62\025\uff62\026\uff62\034\uff62\035" +
    "\uff62\036\uff62\037\uff62\040\uff62\041\uff62\042\uff62\043\uff62" +
    "\001\002\000\004\010\270\001\002\000\004\010\263\001" +
    "\002\000\004\010\260\001\002\000\004\010\255\001\002" +
    "\000\004\010\252\001\002\000\004\010\247\001\002\000" +
    "\060\005\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\001\002\000\004\010" +
    "\245\001\002\000\004\010\240\001\002\000\004\010\235" +
    "\001\002\000\004\010\232\001\002\000\004\010\227\001" +
    "\002\000\004\010\224\001\002\000\034\010\060\021\050" +
    "\044\045\062\034\074\017\100\013\116\041\117\042\120" +
    "\057\121\056\122\044\123\053\124\043\001\002\000\006" +
    "\011\226\015\135\001\002\000\056\005\uffd7\007\uffd7\011" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\001\002\000\034\010\060\021\050\044\045\062\034\074" +
    "\017\100\013\116\041\117\042\120\057\121\056\122\044" +
    "\123\053\124\043\001\002\000\006\011\231\015\135\001" +
    "\002\000\056\005\uffdb\007\uffdb\011\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\001\002\000\034\010" +
    "\060\021\050\044\045\062\034\074\017\100\013\116\041" +
    "\117\042\120\057\121\056\122\044\123\053\124\043\001" +
    "\002\000\006\011\234\015\135\001\002\000\056\005\uffd8" +
    "\007\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\uffd8\001\002\000\034\010\060\021\050\044\045" +
    "\062\034\074\017\100\013\116\041\117\042\120\057\121" +
    "\056\122\044\123\053\124\043\001\002\000\044\011\237" +
    "\016\064\020\103\021\067\022\076\023\063\024\074\025" +
    "\102\026\075\034\101\035\072\036\065\037\077\040\071" +
    "\041\073\042\070\043\066\001\002\000\056\005\uffe5\007" +
    "\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\001\002\000\006\011\242\123\243\001\002\000" +
    "\004\011\244\001\002\000\056\005\uffe1\007\uffe1\011\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\001" +
    "\002\000\004\010\126\001\002\000\056\005\uffe0\007\uffe0" +
    "\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043" +
    "\uffe0\001\002\000\004\011\246\001\002\000\056\005\uffe2" +
    "\007\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\001\002\000\004\123\243\001\002\000\004" +
    "\011\251\001\002\000\056\005\uffdd\007\uffdd\011\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\001\002" +
    "\000\034\010\060\021\050\044\045\062\034\074\017\100" +
    "\013\116\041\117\042\120\057\121\056\122\044\123\053" +
    "\124\043\001\002\000\044\011\254\016\064\020\103\021" +
    "\067\022\076\023\063\024\074\025\102\026\075\034\101" +
    "\035\072\036\065\037\077\040\071\041\073\042\070\043" +
    "\066\001\002\000\056\005\uffe6\007\uffe6\011\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\001\002\000" +
    "\034\010\060\021\050\044\045\062\034\074\017\100\013" +
    "\116\041\117\042\120\057\121\056\122\044\123\053\124" +
    "\043\001\002\000\006\011\257\015\135\001\002\000\056" +
    "\005\uffda\007\uffda\011\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\001\002\000\034\010\060\021\050" +
    "\044\045\062\034\074\017\100\013\116\041\117\042\120" +
    "\057\121\056\122\044\123\053\124\043\001\002\000\006" +
    "\011\262\015\135\001\002\000\056\005\uffd9\007\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\001\002\000\034\010\060\021\050\044\045\062\034\074" +
    "\017\100\013\116\041\117\042\120\057\121\056\122\044" +
    "\123\053\124\043\001\002\000\044\015\265\016\064\020" +
    "\103\021\067\022\076\023\063\024\074\025\102\026\075" +
    "\034\101\035\072\036\065\037\077\040\071\041\073\042" +
    "\070\043\066\001\002\000\034\010\060\021\050\044\045" +
    "\062\034\074\017\100\013\116\041\117\042\120\057\121" +
    "\056\122\044\123\053\124\043\001\002\000\044\011\267" +
    "\016\064\020\103\021\067\022\076\023\063\024\074\025" +
    "\102\026\075\034\101\035\072\036\065\037\077\040\071" +
    "\041\073\042\070\043\066\001\002\000\056\005\uffe4\007" +
    "\uffe4\011\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\043\uffe4\001\002\000\034\010\060\021\050\044\045\062" +
    "\034\074\017\100\013\116\041\117\042\120\057\121\056" +
    "\122\044\123\053\124\043\001\002\000\006\011\272\015" +
    "\135\001\002\000\056\005\uffd5\007\uffd5\011\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\001\002\000" +
    "\022\064\147\065\145\066\144\067\141\070\150\071\146" +
    "\072\151\073\142\001\002\000\060\005\uffcd\007\uffcd\011" +
    "\uffcd\012\140\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\001\002\000\034\010\060\021\050\044\045\062" +
    "\034\074\017\100\013\116\041\117\042\120\057\121\056" +
    "\122\044\123\053\124\043\001\002\000\044\007\277\016" +
    "\064\020\103\021\067\022\076\023\063\024\074\025\102" +
    "\026\075\034\101\035\072\036\065\037\077\040\071\041" +
    "\073\042\070\043\066\001\002\000\056\005\uff61\007\uff61" +
    "\011\uff61\013\uff61\014\uff61\015\uff61\016\uff61\020\uff61\021" +
    "\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\034\uff61" +
    "\035\uff61\036\uff61\037\uff61\040\uff61\041\uff61\042\uff61\043" +
    "\uff61\001\002\000\034\010\060\021\050\044\045\062\034" +
    "\074\017\100\013\116\041\117\042\120\057\121\056\122" +
    "\044\123\053\124\043\001\002\000\006\011\302\015\135" +
    "\001\002\000\056\005\uffdc\007\uffdc\011\uffdc\013\uffdc\014" +
    "\uffdc\015\uffdc\016\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\001\002\000\034" +
    "\010\060\021\050\044\045\062\034\074\017\100\013\116" +
    "\041\117\042\120\057\121\056\122\044\123\053\124\043" +
    "\001\002\000\006\011\305\015\135\001\002\000\056\005" +
    "\uffd6\007\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\001\002\000\034\010\060\021\050\044" +
    "\045\062\034\074\017\100\013\116\041\117\042\120\057" +
    "\121\056\122\044\123\053\124\043\001\002\000\006\011" +
    "\310\015\135\001\002\000\056\005\uffe3\007\uffe3\011\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\001" +
    "\002\000\006\011\313\123\243\001\002\000\004\011\314" +
    "\001\002\000\056\005\uffdf\007\uffdf\011\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\001\002\000\056" +
    "\005\uffde\007\uffde\011\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\042\uffde\043\uffde\001\002\000\034\010\060\021\050" +
    "\044\045\062\034\074\017\100\013\116\041\117\042\120" +
    "\057\121\056\122\044\123\053\124\043\001\002\000\006" +
    "\011\317\015\135\001\002\000\056\005\uffd4\007\uffd4\011" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\001\002\000\056\005\uff6e\007\uff6e\011\uff6e\013\uff6e\014" +
    "\uff6e\015\uff6e\016\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e" +
    "\024\uff6e\025\102\026\075\034\uff6e\035\uff6e\036\uff6e\037" +
    "\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\001\002\000\004" +
    "\004\322\001\002\000\004\053\324\001\002\000\010\005" +
    "\372\053\324\054\371\001\002\000\034\010\060\021\050" +
    "\044\045\062\034\074\017\100\013\116\041\117\042\120" +
    "\057\121\056\122\044\123\053\124\043\001\002\000\010" +
    "\005\uffa7\053\uffa7\054\uffa7\001\002\000\044\014\327\016" +
    "\064\020\103\021\067\022\076\023\063\024\074\025\102" +
    "\026\075\034\101\035\072\036\065\037\077\040\071\041" +
    "\073\042\070\043\066\001\002\000\004\004\330\001\002" +
    "\000\032\003\345\005\346\045\005\047\023\050\351\051" +
    "\350\052\035\055\021\062\034\074\017\100\013\123\025" +
    "\001\002\000\032\003\uffb8\005\uffb8\045\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\055\uffb8\062\uffb8\074\uffb8\100\uffb8" +
    "\123\uffb8\001\002\000\032\003\uffb1\005\uffb1\045\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\055\uffb1\062\uffb1\074\uffb1" +
    "\100\uffb1\123\uffb1\001\002\000\004\013\367\001\002\000" +
    "\032\003\345\005\366\045\005\047\023\050\351\051\350" +
    "\052\035\055\021\062\034\074\017\100\013\123\025\001" +
    "\002\000\004\013\364\001\002\000\004\013\363\001\002" +
    "\000\004\013\362\001\002\000\004\013\361\001\002\000" +
    "\004\013\360\001\002\000\004\013\357\001\002\000\004" +
    "\013\356\001\002\000\032\003\uffb2\005\uffb2\045\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\055\uffb2\062\uffb2\074\uffb2" +
    "\100\uffb2\123\uffb2\001\002\000\006\005\354\013\355\001" +
    "\002\000\010\005\uffa5\053\uffa5\054\uffa5\001\002\000\004" +
    "\013\353\001\002\000\036\010\060\013\uff93\021\050\044" +
    "\045\062\034\074\017\100\013\116\041\117\042\120\057" +
    "\121\056\122\044\123\053\124\043\001\002\000\004\013" +
    "\uff95\001\002\000\044\013\uff94\016\064\020\103\021\067" +
    "\022\076\023\063\024\074\025\102\026\075\034\101\035" +
    "\072\036\065\037\077\040\071\041\073\042\070\043\066" +
    "\001\002\000\032\003\uffb3\005\uffb3\045\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\055\uffb3\062\uffb3\074\uffb3\100\uffb3" +
    "\123\uffb3\001\002\000\032\003\uffab\005\uffab\045\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\055\uffab\062\uffab\074\uffab" +
    "\100\uffab\123\uffab\001\002\000\032\003\uffac\005\uffac\045" +
    "\uffac\047\uffac\050\uffac\051\uffac\052\uffac\055\uffac\062\uffac" +
    "\074\uffac\100\uffac\123\uffac\001\002\000\032\003\uffb0\005" +
    "\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\055\uffb0" +
    "\062\uffb0\074\uffb0\100\uffb0\123\uffb0\001\002\000\032\003" +
    "\uffb4\005\uffb4\045\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\055\uffb4\062\uffb4\074\uffb4\100\uffb4\123\uffb4\001\002\000" +
    "\032\003\uffaf\005\uffaf\045\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\055\uffaf\062\uffaf\074\uffaf\100\uffaf\123\uffaf\001" +
    "\002\000\032\003\uffae\005\uffae\045\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\055\uffae\062\uffae\074\uffae\100\uffae\123" +
    "\uffae\001\002\000\032\003\uffb5\005\uffb5\045\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\055\uffb5\062\uffb5\074\uffb5\100" +
    "\uffb5\123\uffb5\001\002\000\032\003\uffad\005\uffad\045\uffad" +
    "\047\uffad\050\uffad\051\uffad\052\uffad\055\uffad\062\uffad\074" +
    "\uffad\100\uffad\123\uffad\001\002\000\032\003\uffb6\005\uffb6" +
    "\045\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\055\uffb6\062" +
    "\uffb6\074\uffb6\100\uffb6\123\uffb6\001\002\000\032\003\uffb9" +
    "\005\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\055" +
    "\uffb9\062\uffb9\074\uffb9\100\uffb9\123\uffb9\001\002\000\010" +
    "\005\uffa6\053\uffa6\054\uffa6\001\002\000\032\003\uffb7\005" +
    "\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\055\uffb7" +
    "\062\uffb7\074\uffb7\100\uffb7\123\uffb7\001\002\000\004\005" +
    "\u0101\001\002\000\004\014\374\001\002\000\036\002\uffaa" +
    "\003\uffaa\005\uffaa\045\uffaa\047\uffaa\050\uffaa\051\uffaa\052" +
    "\uffaa\055\uffaa\057\uffaa\062\uffaa\074\uffaa\100\uffaa\123\uffaa" +
    "\001\002\000\010\005\uffa8\053\uffa8\054\uffa8\001\002\000" +
    "\004\004\375\001\002\000\032\003\345\005\377\045\005" +
    "\047\023\050\351\051\350\052\035\055\021\062\034\074" +
    "\017\100\013\123\025\001\002\000\032\003\345\005\u0100" +
    "\045\005\047\023\050\351\051\350\052\035\055\021\062" +
    "\034\074\017\100\013\123\025\001\002\000\004\005\uffa3" +
    "\001\002\000\004\005\uffa4\001\002\000\036\002\uffa9\003" +
    "\uffa9\005\uffa9\045\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\055\uffa9\057\uffa9\062\uffa9\074\uffa9\100\uffa9\123\uffa9\001" +
    "\002\000\056\005\uff5d\007\uff5d\011\uff5d\013\uff5d\014\uff5d" +
    "\015\uff5d\016\uff5d\020\103\021\067\022\076\023\063\024" +
    "\074\025\102\026\075\034\101\035\072\036\065\037\077" +
    "\040\071\041\073\042\uff5d\043\uff5d\001\002\000\034\010" +
    "\060\021\050\044\045\062\034\074\017\100\013\116\041" +
    "\117\042\120\057\121\056\122\044\123\053\124\043\001" +
    "\002\000\044\011\u0105\016\064\020\103\021\067\022\076" +
    "\023\063\024\074\025\102\026\075\034\101\035\072\036" +
    "\065\037\077\040\071\041\073\042\070\043\066\001\002" +
    "\000\056\005\uffe7\007\uffe7\011\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\001\002\000\030\002\uffeb" +
    "\003\uffeb\045\uffeb\047\uffeb\052\uffeb\055\uffeb\057\uffeb\062" +
    "\uffeb\074\uffeb\100\uffeb\123\uffeb\001\002\000\030\002\uffec" +
    "\003\uffec\045\uffec\047\uffec\052\uffec\055\uffec\057\uffec\062" +
    "\uffec\074\uffec\100\uffec\123\uffec\001\002\000\030\002\ufff0" +
    "\003\ufff0\045\ufff0\047\ufff0\052\ufff0\055\ufff0\057\ufff0\062" +
    "\ufff0\074\ufff0\100\ufff0\123\ufff0\001\002\000\030\002\ufffe" +
    "\003\033\045\005\047\023\052\035\055\021\057\004\062" +
    "\034\074\017\100\013\123\025\001\002\000\032\002\ufffb" +
    "\003\ufffb\045\ufffb\046\ufffb\047\ufffb\052\ufffb\055\ufffb\057" +
    "\ufffb\062\ufffb\074\ufffb\100\ufffb\123\ufffb\001\002\000\030" +
    "\002\ufff8\003\ufff8\045\ufff8\047\ufff8\052\ufff8\055\ufff8\057" +
    "\ufff8\062\ufff8\074\ufff8\100\ufff8\123\ufff8\001\002\000\030" +
    "\002\uffef\003\uffef\045\uffef\047\uffef\052\uffef\055\uffef\057" +
    "\uffef\062\uffef\074\uffef\100\uffef\123\uffef\001\002\000\034" +
    "\010\060\021\050\044\045\062\034\074\017\100\013\116" +
    "\041\117\042\120\057\121\056\122\044\123\053\124\043" +
    "\001\002\000\040\004\uff88\006\uff88\010\uff88\021\uff88\044" +
    "\uff88\062\uff88\074\uff88\100\uff88\116\uff88\117\uff88\120\uff88" +
    "\121\uff88\122\uff88\123\uff88\124\uff88\001\002\000\040\004" +
    "\uff86\006\uff86\010\uff86\021\uff86\044\uff86\062\uff86\074\uff86" +
    "\100\uff86\116\uff86\117\uff86\120\uff86\121\uff86\122\uff86\123" +
    "\uff86\124\uff86\001\002\000\040\004\uff89\006\uff89\010\uff89" +
    "\021\uff89\044\uff89\062\uff89\074\uff89\100\uff89\116\uff89\117" +
    "\uff89\120\uff89\121\uff89\122\uff89\123\uff89\124\uff89\001\002" +
    "\000\074\060\u012b\061\u0129\062\216\063\u012d\064\147\065" +
    "\145\066\144\067\141\070\150\071\146\072\151\073\142" +
    "\075\213\076\220\077\210\101\202\102\205\103\222\104" +
    "\212\105\211\106\221\107\223\110\203\111\207\112\200" +
    "\113\214\114\201\115\217\123\u012c\001\002\000\040\004" +
    "\uff87\006\uff87\010\uff87\021\uff87\044\uff87\062\uff87\074\uff87" +
    "\100\uff87\116\uff87\117\uff87\120\uff87\121\uff87\122\uff87\123" +
    "\uff87\124\uff87\001\002\000\040\004\u0118\006\u0119\010\060" +
    "\021\050\044\045\062\034\074\017\100\013\116\041\117" +
    "\042\120\057\121\056\122\044\123\053\124\043\001\002" +
    "\000\040\004\uff8a\006\uff8a\010\uff8a\021\uff8a\044\uff8a\062" +
    "\uff8a\074\uff8a\100\uff8a\116\uff8a\117\uff8a\120\uff8a\121\uff8a" +
    "\122\uff8a\123\uff8a\124\uff8a\001\002\000\004\013\uff90\001" +
    "\002\000\004\013\uff8f\001\002\000\044\013\uff91\016\064" +
    "\020\103\021\067\022\076\023\063\024\074\025\102\026" +
    "\075\034\101\035\072\036\065\037\077\040\071\041\073" +
    "\042\070\043\066\001\002\000\004\123\u011f\001\002\000" +
    "\036\007\u011b\010\060\021\050\044\045\062\034\074\017" +
    "\100\013\116\041\117\042\120\057\121\056\122\044\123" +
    "\053\124\043\001\002\000\006\007\u011c\015\135\001\002" +
    "\000\004\013\uff80\001\002\000\004\013\uff81\001\002\000" +
    "\006\005\uff7b\015\uff7b\001\002\000\006\005\u0127\015\u0126" +
    "\001\002\000\004\014\u0120\001\002\000\036\006\u0122\010" +
    "\060\021\050\044\045\062\034\074\017\100\013\116\041" +
    "\117\042\120\057\121\056\122\044\123\053\124\043\001" +
    "\002\000\046\005\uff79\015\uff79\016\064\020\103\021\067" +
    "\022\076\023\063\024\074\025\102\026\075\034\101\035" +
    "\072\036\065\037\077\040\071\041\073\042\070\043\066" +
    "\001\002\000\034\010\060\021\050\044\045\062\034\074" +
    "\017\100\013\116\041\117\042\120\057\121\056\122\044" +
    "\123\053\124\043\001\002\000\006\005\uff7a\015\uff7a\001" +
    "\002\000\006\007\u0125\015\135\001\002\000\006\005\uff78" +
    "\015\uff78\001\002\000\004\123\u011f\001\002\000\004\013" +
    "\uff7d\001\002\000\006\005\uff7c\015\uff7c\001\002\000\004" +
    "\010\uffd0\001\002\000\004\010\u013a\001\002\000\004\010" +
    "\uffd1\001\002\000\020\006\u012e\012\u012f\017\u0114\030\u0110" +
    "\031\u0112\032\u010e\033\u010f\001\002\000\004\010\uffcf\001" +
    "\002\000\034\010\060\021\050\044\045\062\034\074\017" +
    "\100\013\116\041\117\042\120\057\121\056\122\044\123" +
    "\053\124\043\001\002\000\030\060\u012b\061\u0129\063\u012d" +
    "\064\147\065\145\066\144\067\141\070\150\071\146\072" +
    "\151\073\142\001\002\000\036\006\u0119\010\060\021\050" +
    "\044\045\062\034\074\017\100\013\116\041\117\042\120" +
    "\057\121\056\122\044\123\053\124\043\001\002\000\004" +
    "\013\uff8d\001\002\000\044\013\uff8e\016\064\020\103\021" +
    "\067\022\076\023\063\024\074\025\102\026\075\034\101" +
    "\035\072\036\065\037\077\040\071\041\073\042\070\043" +
    "\066\001\002\000\004\010\u0134\001\002\000\004\011\u0135" +
    "\001\002\000\004\013\uffd3\001\002\000\044\007\u0137\016" +
    "\064\020\103\021\067\022\076\023\063\024\074\025\102" +
    "\026\075\034\101\035\072\036\065\037\077\040\071\041" +
    "\073\042\070\043\066\001\002\000\014\017\u0114\030\u0110" +
    "\031\u0112\032\u010e\033\u010f\001\002\000\034\010\060\021" +
    "\050\044\045\062\034\074\017\100\013\116\041\117\042" +
    "\120\057\121\056\122\044\123\053\124\043\001\002\000" +
    "\044\013\uff8c\016\064\020\103\021\067\022\076\023\063" +
    "\024\074\025\102\026\075\034\101\035\072\036\065\037" +
    "\077\040\071\041\073\042\070\043\066\001\002\000\004" +
    "\011\u013b\001\002\000\004\013\uffd2\001\002\000\044\007" +
    "\u013d\016\064\020\103\021\067\022\076\023\063\024\074" +
    "\025\102\026\075\034\101\035\072\036\065\037\077\040" +
    "\071\041\073\042\070\043\066\001\002\000\014\017\u0114" +
    "\030\u0110\031\u0112\032\u010e\033\u010f\001\002\000\034\010" +
    "\060\021\050\044\045\062\034\074\017\100\013\116\041" +
    "\117\042\120\057\121\056\122\044\123\053\124\043\001" +
    "\002\000\044\013\uff8b\016\064\020\103\021\067\022\076" +
    "\023\063\024\074\025\102\026\075\034\101\035\072\036" +
    "\065\037\077\040\071\041\073\042\070\043\066\001\002" +
    "\000\040\002\uffa1\003\uffa1\005\uffa1\045\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\055\uffa1\056\u0141\057\uffa1\062\uffa1" +
    "\074\uffa1\100\uffa1\123\uffa1\001\002\000\006\004\u0144\055" +
    "\u0145\001\002\000\036\002\uffa0\003\uffa0\005\uffa0\045\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\052\uffa0\055\uffa0\057\uffa0\062" +
    "\uffa0\074\uffa0\100\uffa0\123\uffa0\001\002\000\040\002\uff9b" +
    "\003\uff9b\005\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\052" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\062\uff9b\074\uff9b\100\uff9b" +
    "\123\uff9b\001\002\000\032\003\345\005\u014e\045\005\047" +
    "\023\050\351\051\350\052\035\055\021\062\034\074\017" +
    "\100\013\123\025\001\002\000\004\010\u0146\001\002\000" +
    "\034\010\060\021\050\044\045\062\034\074\017\100\013" +
    "\116\041\117\042\120\057\121\056\122\044\123\053\124" +
    "\043\001\002\000\044\011\u0148\016\064\020\103\021\067" +
    "\022\076\023\063\024\074\025\102\026\075\034\101\035" +
    "\072\036\065\037\077\040\071\041\073\042\070\043\066" +
    "\001\002\000\004\004\u0149\001\002\000\032\003\345\005" +
    "\u014b\045\005\047\023\050\351\051\350\052\035\055\021" +
    "\062\034\074\017\100\013\123\025\001\002\000\032\003" +
    "\345\005\u014c\045\005\047\023\050\351\051\350\052\035" +
    "\055\021\062\034\074\017\100\013\123\025\001\002\000" +
    "\040\002\uff99\003\uff99\005\uff99\045\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\055\uff99\056\uff99\057\uff99\062\uff99\074" +
    "\uff99\100\uff99\123\uff99\001\002\000\040\002\uff9a\003\uff9a" +
    "\005\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\062\uff9a\074\uff9a\100\uff9a\123\uff9a" +
    "\001\002\000\032\003\345\005\u014f\045\005\047\023\050" +
    "\351\051\350\052\035\055\021\062\034\074\017\100\013" +
    "\123\025\001\002\000\036\002\uff97\003\uff97\005\uff97\045" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\055\uff97\057\uff97" +
    "\062\uff97\074\uff97\100\uff97\123\uff97\001\002\000\036\002" +
    "\uff98\003\uff98\005\uff98\045\uff98\047\uff98\050\uff98\051\uff98" +
    "\052\uff98\055\uff98\057\uff98\062\uff98\074\uff98\100\uff98\123" +
    "\uff98\001\002\000\036\002\uffa2\003\uffa2\005\uffa2\045\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\052\uffa2\055\uffa2\057\uffa2\062" +
    "\uffa2\074\uffa2\100\uffa2\123\uffa2\001\002\000\040\002\uff9c" +
    "\003\uff9c\005\uff9c\045\uff9c\047\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\062\uff9c\074\uff9c\100\uff9c" +
    "\123\uff9c\001\002\000\034\010\060\021\050\044\045\062" +
    "\034\074\017\100\013\116\041\117\042\120\057\121\056" +
    "\122\044\123\053\124\043\001\002\000\044\011\u0154\016" +
    "\064\020\103\021\067\022\076\023\063\024\074\025\102" +
    "\026\075\034\101\035\072\036\065\037\077\040\071\041" +
    "\073\042\070\043\066\001\002\000\004\013\uff92\001\002" +
    "\000\030\002\uffee\003\uffee\045\uffee\047\uffee\052\uffee\055" +
    "\uffee\057\uffee\062\uffee\074\uffee\100\uffee\123\uffee\001\002" +
    "\000\034\010\060\021\050\044\045\062\034\074\017\100" +
    "\013\116\041\117\042\120\057\121\056\122\044\123\053" +
    "\124\043\001\002\000\044\011\u0158\016\064\020\103\021" +
    "\067\022\076\023\063\024\074\025\102\026\075\034\101" +
    "\035\072\036\065\037\077\040\071\041\073\042\070\043" +
    "\066\001\002\000\004\004\u0159\001\002\000\032\003\345" +
    "\005\u015b\045\005\047\023\050\351\051\350\052\035\055" +
    "\021\062\034\074\017\100\013\123\025\001\002\000\032" +
    "\003\345\005\u015c\045\005\047\023\050\351\051\350\052" +
    "\035\055\021\062\034\074\017\100\013\123\025\001\002" +
    "\000\040\002\uff9d\003\uff9d\005\uff9d\045\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\055\uff9d\056\uff9d\057\uff9d\062\uff9d" +
    "\074\uff9d\100\uff9d\123\uff9d\001\002\000\040\002\uff9e\003" +
    "\uff9e\005\uff9e\045\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\055\uff9e\056\uff9e\057\uff9e\062\uff9e\074\uff9e\100\uff9e\123" +
    "\uff9e\001\002\000\030\002\ufff4\003\ufff4\045\ufff4\047\ufff4" +
    "\052\ufff4\055\ufff4\057\ufff4\062\ufff4\074\ufff4\100\ufff4\123" +
    "\ufff4\001\002\000\034\010\060\021\050\044\045\062\034" +
    "\074\017\100\013\116\041\117\042\120\057\121\056\122" +
    "\044\123\053\124\043\001\002\000\044\011\u0160\016\064" +
    "\020\103\021\067\022\076\023\063\024\074\025\102\026" +
    "\075\034\101\035\072\036\065\037\077\040\071\041\073" +
    "\042\070\043\066\001\002\000\056\005\uffe9\007\uffe9\011" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\001\002\000\030\002\uffed\003\uffed\045\uffed\047\uffed\052" +
    "\uffed\055\uffed\057\uffed\062\uffed\074\uffed\100\uffed\123\uffed" +
    "\001\002\000\030\002\ufff5\003\ufff5\045\ufff5\047\ufff5\052" +
    "\ufff5\055\ufff5\057\ufff5\062\ufff5\074\ufff5\100\ufff5\123\ufff5" +
    "\001\002\000\034\010\060\021\050\044\045\062\034\074" +
    "\017\100\013\116\041\117\042\120\057\121\056\122\044" +
    "\123\053\124\043\001\002\000\006\011\u0165\015\135\001" +
    "\002\000\056\005\uffe8\007\uffe8\011\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\041\uffe8\042\uffe8\043\uffe8\001\002\000\030\002" +
    "\ufff6\003\ufff6\045\ufff6\047\ufff6\052\ufff6\055\ufff6\057\ufff6" +
    "\062\ufff6\074\ufff6\100\ufff6\123\ufff6\001\002\000\004\002" +
    "\001\001\002\000\034\010\060\021\050\044\045\062\034" +
    "\074\017\100\013\116\041\117\042\120\057\121\056\122" +
    "\044\123\053\124\043\001\002\000\044\011\u016a\016\064" +
    "\020\103\021\067\022\076\023\063\024\074\025\102\026" +
    "\075\034\101\035\072\036\065\037\077\040\071\041\073" +
    "\042\070\043\066\001\002\000\004\013\u016b\001\002\000" +
    "\032\002\ufff9\003\ufff9\045\ufff9\046\ufff9\047\ufff9\052\ufff9" +
    "\055\ufff9\057\ufff9\062\ufff9\074\ufff9\100\ufff9\123\ufff9\001" +
    "\002\000\010\013\uff82\015\u016f\017\u016e\001\002\000\010" +
    "\013\uff76\015\uff76\017\uff76\001\002\000\040\004\u0118\006" +
    "\u0119\010\060\021\050\044\045\062\034\074\017\100\013" +
    "\116\041\117\042\120\057\121\056\122\044\123\053\124" +
    "\043\001\002\000\004\123\u0170\001\002\000\010\013\uff77" +
    "\015\uff77\017\uff77\001\002\000\004\013\uff84\001\002\000" +
    "\004\013\uff83\001\002\000\044\013\uff85\016\064\020\103" +
    "\021\067\022\076\023\063\024\074\025\102\026\075\034" +
    "\101\035\072\036\065\037\077\040\071\041\073\042\070" +
    "\043\066\001\002\000\004\010\u0175\001\002\000\006\011" +
    "\u0178\045\u0177\001\002\000\006\011\u0180\015\u017f\001\002" +
    "\000\004\123\u017e\001\002\000\004\004\u017a\001\002\000" +
    "\006\011\uffbb\015\uffbb\001\002\000\032\003\345\005\u017c" +
    "\045\005\047\023\050\351\051\350\052\035\055\021\062" +
    "\034\074\017\100\013\123\025\001\002\000\032\003\345" +
    "\005\u017d\045\005\047\023\050\351\051\350\052\035\055" +
    "\021\062\034\074\017\100\013\123\025\001\002\000\030" +
    "\002\uffbd\003\uffbd\045\uffbd\047\uffbd\052\uffbd\055\uffbd\057" +
    "\uffbd\062\uffbd\074\uffbd\100\uffbd\123\uffbd\001\002\000\030" +
    "\002\uffbe\003\uffbe\045\uffbe\047\uffbe\052\uffbe\055\uffbe\057" +
    "\uffbe\062\uffbe\074\uffbe\100\uffbe\123\uffbe\001\002\000\006" +
    "\011\uffba\015\uffba\001\002\000\004\045\u0177\001\002\000" +
    "\004\004\u0181\001\002\000\032\003\345\005\u0183\045\005" +
    "\047\023\050\351\051\350\052\035\055\021\062\034\074" +
    "\017\100\013\123\025\001\002\000\032\003\345\005\u0184" +
    "\045\005\047\023\050\351\051\350\052\035\055\021\062" +
    "\034\074\017\100\013\123\025\001\002\000\030\002\uffbf" +
    "\003\uffbf\045\uffbf\047\uffbf\052\uffbf\055\uffbf\057\uffbf\062" +
    "\uffbf\074\uffbf\100\uffbf\123\uffbf\001\002\000\030\002\uffc0" +
    "\003\uffc0\045\uffc0\047\uffc0\052\uffc0\055\uffc0\057\uffc0\062" +
    "\uffc0\074\uffc0\100\uffc0\123\uffc0\001\002\000\006\011\uffbc" +
    "\015\uffbc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\044\002\006\004\027\006\036\007\014\010" +
    "\023\022\035\027\030\031\015\032\021\034\011\035\017" +
    "\036\013\041\031\043\010\044\025\045\007\046\026\001" +
    "\001\000\002\001\001\000\004\050\u016b\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\004\u010a\010\023\022" +
    "\035\027\030\031\015\032\021\034\011\035\017\036\013" +
    "\041\031\043\010\044\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\u0142\042\u0141\055\u013f\001\001\000\006\015" +
    "\u0112\052\124\001\001\000\002\001\001\000\036\004\027" +
    "\007\u0109\010\023\022\035\027\030\031\015\032\021\034" +
    "\011\035\017\036\013\041\031\043\010\044\025\045\u0108" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\023\046\024" +
    "\060\025\050\026\054\027\053\031\045\032\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\u0101\024\060\025\050\026\054" +
    "\027\053\031\045\032\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\317\024\060\025\050\026\054" +
    "\027\053\031\045\032\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\023\061\024\060\025\050\026\054\027\053\031\045" +
    "\032\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\023\122\024\060\025\050\026\054\027\053\031\045" +
    "\032\051\001\001\000\020\023\117\024\060\025\050\026" +
    "\054\027\053\031\045\032\051\001\001\000\020\023\116" +
    "\024\060\025\050\026\054\027\053\031\045\032\051\001" +
    "\001\000\020\023\115\024\060\025\050\026\054\027\053" +
    "\031\045\032\051\001\001\000\020\023\114\024\060\025" +
    "\050\026\054\027\053\031\045\032\051\001\001\000\020" +
    "\023\113\024\060\025\050\026\054\027\053\031\045\032" +
    "\051\001\001\000\020\023\112\024\060\025\050\026\054" +
    "\027\053\031\045\032\051\001\001\000\020\023\111\024" +
    "\060\025\050\026\054\027\053\031\045\032\051\001\001" +
    "\000\020\023\110\024\060\025\050\026\054\027\053\031" +
    "\045\032\051\001\001\000\020\023\107\024\060\025\050" +
    "\026\054\027\053\031\045\032\051\001\001\000\002\001" +
    "\001\000\020\023\106\024\060\025\050\026\054\027\053" +
    "\031\045\032\051\001\001\000\020\023\105\024\060\025" +
    "\050\026\054\027\053\031\045\032\051\001\001\000\002" +
    "\001\001\000\020\023\104\024\060\025\050\026\054\027" +
    "\053\031\045\032\051\001\001\000\002\001\001\000\020" +
    "\023\103\024\060\025\050\026\054\027\053\031\045\032" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\121\024\060\025\050\026\054" +
    "\027\053\031\045\032\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\203\030\214\001\001\000\002" +
    "\001\001\000\022\023\132\024\060\025\050\026\054\027" +
    "\053\031\045\032\051\051\133\001\001\000\020\023\127" +
    "\024\060\025\050\026\054\027\053\031\045\032\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\023\136\024" +
    "\060\025\050\026\054\027\053\031\045\032\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\132\024\060\025\050\026\054\027\053\031\045" +
    "\032\051\051\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\023\132\024\060\025\050\026\054\027\053" +
    "\031\045\032\051\051\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\023\132\024\060\025\050\026\054" +
    "\027\053\031\045\032\051\051\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\023\235\024\060\025\050" +
    "\026\054\027\053\031\045\032\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\023" +
    "\252\024\060\025\050\026\054\027\053\031\045\032\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\132\024\060\025\050\026\054\027\053\031\045\032\051" +
    "\051\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\023\132\024\060\025\050\026\054\027\053\031\045" +
    "\032\051\051\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\023\263\024\060\025\050\026\054\027\053" +
    "\031\045\032\051\001\001\000\002\001\001\000\020\023" +
    "\265\024\060\025\050\026\054\027\053\031\045\032\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\023" +
    "\132\024\060\025\050\026\054\027\053\031\045\032\051" +
    "\051\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\214\001\001\000\002\001\001\000\020\023\275" +
    "\024\060\025\050\026\054\027\053\031\045\032\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\023\132" +
    "\024\060\025\050\026\054\027\053\031\045\032\051\051" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\023\132\024\060\025\050\026\054\027\053\031\045\032" +
    "\051\051\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\023\132\024\060\025\050\026\054\027\053\031" +
    "\045\032\051\051\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\023\132\024\060" +
    "\025\050\026\054\027\053\031\045\032\051\051\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\324\047\322\001\001\000" +
    "\006\017\372\020\367\001\001\000\020\023\325\024\060" +
    "\025\050\026\054\027\053\031\045\032\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\010\023\027\342\031\335\032\337\033\330\034\332\035" +
    "\336\036\334\037\346\040\341\041\343\043\331\044\340" +
    "\054\333\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\010\023\027\342\031\335\032\337" +
    "\033\364\034\332\035\336\036\334\037\346\040\341\041" +
    "\343\043\331\044\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\023\351\024\060\025\050\026\054\027\053\031\045" +
    "\032\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\010\023\027\342\031" +
    "\335\032\337\033\330\034\332\035\336\036\334\037\346" +
    "\040\341\041\343\043\331\044\340\054\375\001\001\000" +
    "\034\010\023\027\342\031\335\032\337\033\364\034\332" +
    "\035\336\036\334\037\346\040\341\041\343\043\331\044" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\023\u0103\024\060\025" +
    "\050\026\054\027\053\031\045\032\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\004\u010a\010\023\022\035" +
    "\027\030\031\015\032\021\034\011\035\017\036\013\041" +
    "\031\043\010\044\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\023\u013b\024\060\025" +
    "\050\026\054\027\053\031\045\032\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\203\016\u0129\030\214\001\001\000\002\001\001\000\024" +
    "\013\u0114\014\u0115\023\u0116\024\060\025\050\026\054\027" +
    "\053\031\045\032\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\u011c\053\u011d\001\001\000\022\023\132\024\060\025\050" +
    "\026\054\027\053\031\045\032\051\051\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\u0122\023\u0120\024\060\025\050\026\054\027\053\031\045" +
    "\032\051\001\001\000\002\001\001\000\022\023\132\024" +
    "\060\025\050\026\054\027\053\031\045\032\051\051\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\u012f\052\273\001\001\000\002\001\001" +
    "\000\020\023\u0135\024\060\025\050\026\054\027\053\031" +
    "\045\032\051\001\001\000\006\016\u0132\030\214\001\001" +
    "\000\022\013\u0130\023\u0131\024\060\025\050\026\054\027" +
    "\053\031\045\032\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u0137\001\001\000\020" +
    "\023\u0138\024\060\025\050\026\054\027\053\031\045\032" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u013d\001\001\000" +
    "\020\023\u013e\024\060\025\050\026\054\027\053\031\045" +
    "\032\051\001\001\000\002\001\001\000\006\011\u0150\042" +
    "\u014f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\010\023\027\342\031\335\032\337\033" +
    "\330\034\332\035\336\036\334\037\346\040\341\041\343" +
    "\043\331\044\340\054\u014c\001\001\000\002\001\001\000" +
    "\020\023\u0146\024\060\025\050\026\054\027\053\031\045" +
    "\032\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\010\023\027\342\031\335\032\337\033\330\034\332" +
    "\035\336\036\334\037\346\040\341\041\343\043\331\044" +
    "\340\054\u0149\001\001\000\034\010\023\027\342\031\335" +
    "\032\337\033\364\034\332\035\336\036\334\037\346\040" +
    "\341\041\343\043\331\044\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\010\023\027\342\031\335\032" +
    "\337\033\364\034\332\035\336\036\334\037\346\040\341" +
    "\041\343\043\331\044\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\023\u0152\024\060\025\050\026\054\027\053\031\045\032" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\023\u0156\024\060\025\050\026\054\027" +
    "\053\031\045\032\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\010\023\027\342\031\335\032\337\033" +
    "\330\034\332\035\336\036\334\037\346\040\341\041\343" +
    "\043\331\044\340\054\u0159\001\001\000\034\010\023\027" +
    "\342\031\335\032\337\033\364\034\332\035\336\036\334" +
    "\037\346\040\341\041\343\043\331\044\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\023\u015e\024\060\025\050\026\054\027\053\031\045\032" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\023\132\024\060\025" +
    "\050\026\054\027\053\031\045\032\051\051\u0163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\u0168\024\060\025\050\026\054" +
    "\027\053\031\045\032\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\013\u0170\014\u0171\023\u0172\024\060\025" +
    "\050\026\054\027\053\031\045\032\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\u0178" +
    "\056\u0175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\010\023\027\342" +
    "\031\335\032\337\033\330\034\332\035\336\036\334\037" +
    "\346\040\341\041\343\043\331\044\340\054\u017a\001\001" +
    "\000\034\010\023\027\342\031\335\032\337\033\364\034" +
    "\332\035\336\036\334\037\346\040\341\041\343\043\331" +
    "\044\340\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u0184\001\001\000\002\001\001" +
    "\000\036\010\023\027\342\031\335\032\337\033\330\034" +
    "\332\035\336\036\334\037\346\040\341\041\343\043\331" +
    "\044\340\054\u0181\001\001\000\034\010\023\027\342\031" +
    "\335\032\337\033\364\034\332\035\336\036\334\037\346" +
    "\040\341\041\343\043\331\044\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$fsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$fsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$fsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public static AstFs Syntax_tree;

    public static String archivo;
    public static boolean ban = true;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s) {
        StringBuilder m = new StringBuilder("Error Sintactico");
        int yline = s.left, ycol = s.right;

        if(s.left >= 0) {
        	m.append(" en la Linea " + (s.left));
        	if(s.right >= 0) {
        		m.append(" Columna " + (s.right));
        	}
        	m.append(". No se esperaba este componente: " + s.value + ".");
        }

            Object valor = (s.value != null)? s.value: "Fin de archivo";
            otros.Error err = new otros.Error(Constante.FS, Constante.SINTACTICO, "", Constante.ent_temporal.ambito, " No se esperaba este componente: " + valor, Constante.archivo, s.left, s.right);
            otros.Error.agregarError(err);
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        syntax_error(s);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$fsParser$actions {
  private final fsParser parser;

  /** Constructor */
  CUP$fsParser$actions(fsParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$fsParser$do_action_part00000000(
    int                        CUP$fsParser$act_num,
    java_cup.runtime.lr_parser CUP$fsParser$parser,
    java.util.Stack            CUP$fsParser$stack,
    int                        CUP$fsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$fsParser$result;

      /* select the action based on the action number */
      switch (CUP$fsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = start_val;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$fsParser$parser.done_parsing();
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INICIO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		AstFs n1 = (AstFs)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		Syntax_tree = n1;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= 
            {
              Object RESULT =null;
		Syntax_tree = null;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= IMPORTACIONES ELEMENTOS 
            {
              AstFs RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Importacion> n1 = (LinkedList<Importacion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		LinkedList<Object> n2 = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new AstFs(n1, n2);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ELEMENTOS 
            {
              AstFs RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		LinkedList<Object> n1 = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new AstFs(n1);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= IMPORTACIONES 
            {
              AstFs RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		LinkedList<Importacion> n1 = (LinkedList<Importacion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new AstFs(n1, new LinkedList<Object>());
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INICIO",4, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPORTACIONES ::= IMPORTACIONES IMPORTACION 
            {
              LinkedList<Importacion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Importacion> n1 = (LinkedList<Importacion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Importacion n2 = (Importacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n1; RESULT.add(n2);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",36, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IMPORTACIONES ::= IMPORTACION 
            {
              LinkedList<Importacion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Importacion n1 = (Importacion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new LinkedList<Importacion>(); RESULT.add(n1);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("IMPORTACIONES",36, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IMPORTACION ::= pr_importar pari EXP pard ptcoma 
            {
              Importacion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new Importacion(n2, n1left, n2right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("IMPORTACION",5, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ELEMENTOS ::= ELEMENTOS ELEMENTO 
            {
              LinkedList<Object> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Object> n1 = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n1; if(n2 != null) { RESULT.add(n2); } 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",35, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ELEMENTOS ::= ELEMENTO 
            {
              LinkedList<Object> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new LinkedList<Object>(); if(n1 != null) { RESULT.add(n1); }
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",35, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELEMENTO ::= DECLARACION ptcoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ELEMENTO ::= IMPRIMIR ptcoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELEMENTO ::= ASIGNACION ptcoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTO ::= SI 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO ::= SELECCIONA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTO ::= FUNCION 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Funcion n = (Funcion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO ::= CALL_FUNCION ptcoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTO ::= CALL_NAT_WOT ptcoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTO ::= CALL_NAT_INT ptcoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTO ::= CALL_NAT_ARR2 ptcoma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTO ::= error ptcoma 
            {
              Object RESULT =null;

              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTO ::= error llad 
            {
              Object RESULT =null;

              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",2, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CALL_NAT_INT ::= id punto FUN_NAT_INT 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Variable_Funcion(n1, n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_INT",24, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CALL_NAT_INT ::= pr_leergxml pari EXP pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new LeerGxml(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_INT",24, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CALL_NAT_INT ::= pr_crearventana pari LEXP pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n2 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Variable_Funcion(new CrearVentana(n2, n1left, n1right), n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_INT",24, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CALL_NAT_INT ::= pr_creararraydesdearchivo pari EXP pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Variable_Funcion(new CrearArrayDesdeArchivo(n2, n1left, n1right), n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_INT",24, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUN_NAT_INT ::= pr_obtenerporetiqueta pari EXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new ObtenerPorEtiqueta(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUN_NAT_INT ::= pr_obtenerporid pari EXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new ObtenerPorId(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUN_NAT_INT ::= pr_obtenerpornombre pari EXP coma EXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n3 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new ObtenerPorNombre(n2, n3, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUN_NAT_INT ::= pr_crearcontenedor pari LEXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n2 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new CrearContenedor(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUN_NAT_INT ::= pr_creararraydesdearchivo pari pard 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new CrearArrayDesdeArchivo(nleft, nright);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUN_NAT_INT ::= pr_alcerrar pari pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new AlCerrar(n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUN_NAT_INT ::= pr_alcerrar pari CALL_FUNCION pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new AlCerrar(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUN_NAT_INT ::= pr_alcargar pari pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new AlCargar(n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUN_NAT_INT ::= pr_alcargar pari CALL_FUNCION pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new AlCargar(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUN_NAT_INT ::= pr_alclic pari CALL_FUNCION pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new AlClick(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUN_NAT_INT ::= pr_creartexto pari LEXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n2 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new CrearTexto(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUN_NAT_INT ::= pr_crearcajatexto pari LEXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n2 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new CrearCajaTexto(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUN_NAT_INT ::= pr_crearareatexto pari LEXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n2 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new CrearAreaTexto(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUN_NAT_INT ::= pr_crearcontrolnumerico pari LEXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n2 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new CrearControlNumerico(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUN_NAT_INT ::= pr_creardespegable pari LEXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n2 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new CrearDesplegable(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUN_NAT_INT ::= pr_crearboton pari LEXP pard 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n2 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new CrearBoton(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUN_NAT_INT ::= pr_crearimagen pari LEXP pard 
            {
              Object RESULT =null;

              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUN_NAT_INT ::= pr_crearreproductor pari LEXP pard 
            {
              Object RESULT =null;

              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUN_NAT_INT ::= pr_crearvideo pari LEXP pard 
            {
              Object RESULT =null;

              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUN_NAT_INT",3, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CALL_NAT_WOT ::= id punto id punto OPNAT pari pard 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operador n3 = (Operador)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new FunNatWot(n1, n2, n3, n2left, n2right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_WOT",34, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CALL_NAT_WOT ::= id punto OPNAT pari pard 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Operador n2 = (Operador)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new FunNatWot(n1, n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_WOT",34, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPNAT ::= pr_descendente 
            {
              Operador RESULT =null;
		RESULT = Operador.ASCENDENTE;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("OPNAT",12, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPNAT ::= pr_ascendente 
            {
              Operador RESULT =null;
		RESULT = Operador.DESCENDENTE;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("OPNAT",12, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPNAT ::= pr_invertir 
            {
              Operador RESULT =null;
		RESULT = Operador.INVERTIR;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("OPNAT",12, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CALL_NAT_ARR2 ::= id CALL_NAT_ARR 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		LinkedList<Expresion> n4 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Variable(n1, null, n4, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_ARR2",23, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CALL_NAT_ARR2 ::= id punto id CALL_NAT_ARR 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		LinkedList<Expresion> n4 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Variable(n1, n2, null, n4, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_ARR2",23, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CALL_NAT_ARR ::= CALL_NAT_ARR punto NAT_ARR 
            {
              LinkedList<Expresion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		LinkedList<Expresion> n1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n1; RESULT.add(n2);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_ARR",40, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CALL_NAT_ARR ::= punto NAT_ARR 
            {
              LinkedList<Expresion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new LinkedList<Expresion>(); RESULT.add(n1);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_NAT_ARR",40, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NAT_ARR ::= pr_maximo pari pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new Maximo(n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("NAT_ARR",22, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NAT_ARR ::= pr_minimo pari pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new Minimo(n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("NAT_ARR",22, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NAT_ARR ::= pr_filtrar pari id pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Filtrar(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("NAT_ARR",22, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NAT_ARR ::= pr_buscar pari id pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Buscar(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("NAT_ARR",22, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NAT_ARR ::= pr_map pari id pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Map(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("NAT_ARR",22, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NAT_ARR ::= pr_reduce pari id pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Reduce(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("NAT_ARR",22, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NAT_ARR ::= pr_todos pari id pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Todos(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("NAT_ARR",22, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NAT_ARR ::= pr_alguno pari id pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Alguno(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("NAT_ARR",22, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CALL_FUNCION ::= id pari LEXP pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n2 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new CallFuncion(n1, n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCION",21, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CALL_FUNCION ::= id pari pard 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new CallFuncion(n1, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCION",21, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNCION ::= pr_funcion id pari LPARAMS pard llai INSTRUCCIONES llad 
            {
              Funcion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		LinkedList<Declaracion> n3 = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Instruccion> n4 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Funcion(n2, n3, n4, n2left, n2right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNCION ::= pr_funcion id pari LPARAMS pard llai llad 
            {
              Funcion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		LinkedList<Declaracion> n3 = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		RESULT = new Funcion(n2, n3, n2left, n2right, true);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCION ::= pr_funcion id pari pard llai INSTRUCCIONES llad 
            {
              Funcion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Instruccion> n4 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Funcion(n2, n4, n2left, n2right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCION ::= pr_funcion id pari pard llai llad 
            {
              Funcion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		RESULT = new Funcion(n2, n2left, n2right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("FUNCION",16, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LPARAMS ::= LPARAMS coma PARAM 
            {
              LinkedList<Declaracion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		LinkedList<Declaracion> n1 = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Declaracion n2 = (Declaracion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n1; RESULT.add(n2); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LPARAMS",44, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LPARAMS ::= PARAM 
            {
              LinkedList<Declaracion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Declaracion n1 = (Declaracion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new LinkedList<Declaracion>(); RESULT.add(n1); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LPARAMS",44, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAM ::= pr_var id 
            {
              Declaracion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new Declaracion(n2, n2left, n2right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("PARAM",15, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Instruccion> n1 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Instruccion n2 = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n1; if (n2 != null) { RESULT.add(n2); } 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",42, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Instruccion n2 = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); if(n2 != null) { RESULT.add(n2); }
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",42, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INSTRUCCION ::= DECLARACION ptcoma 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INSTRUCCION ::= IMPRIMIR ptcoma 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INSTRUCCION ::= ASIGNACION ptcoma 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INSTRUCCION ::= RETORNAR ptcoma 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INSTRUCCION ::= DETENER ptcoma 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INSTRUCCION ::= SI 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INSTRUCCION ::= SELECCIONA 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INSTRUCCION ::= CALL_FUNCION ptcoma 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = (Instruccion) n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCCION ::= CALL_NAT_WOT ptcoma 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Instruccion n = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCCION ::= CALL_NAT_INT ptcoma 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = (Instruccion) n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCCION ::= CALL_NAT_ARR2 ptcoma 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = (Instruccion) n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCCION ::= error ptcoma 
            {
              Instruccion RESULT =null;

              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCCION ::= error llad 
            {
              Instruccion RESULT =null;

              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",25, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SELECCIONA ::= pr_selecciona pari EXP pard llai LCASOS llad 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Caso> n3 = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Selecciona(n2, n3, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",33, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SELECCIONA ::= pr_selecciona pari EXP pard llai LCASOS DEFECTO llad 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		LinkedList<Caso> n3 = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Caso n4 = (Caso)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Selecciona(n2, n3, n4, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SELECCIONA",33, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LCASOS ::= LCASOS CASO 
            {
              LinkedList<Caso> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Caso> n1 = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Caso n2 = (Caso)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n1; RESULT.add(n2);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LCASOS",37, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LCASOS ::= CASO 
            {
              LinkedList<Caso> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Caso n1 = (Caso)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new LinkedList<Caso>(); RESULT.add(n1);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LCASOS",37, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASO ::= pr_caso EXP dospuntos llai INSTRUCCIONES llad 
            {
              Caso RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Instruccion> n3 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Caso(n2, n3, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASO ::= pr_caso EXP dospuntos llai llad 
            {
              Caso RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		RESULT = new Caso(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("CASO",13, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DEFECTO ::= pr_defecto dospuntos llai INSTRUCCIONES llad 
            {
              Caso RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Instruccion> n2 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Caso(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("DEFECTO",14, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DEFECTO ::= pr_defecto dospuntos llai llad 
            {
              Caso RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		RESULT = new Caso(n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("DEFECTO",14, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SI ::= SSI LSINOSI SINO 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		SSi n1 = (SSi)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<SSi> n2 = (LinkedList<SSi>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Instruccion n3 = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Si(n1, n2, n3);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SI",31, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SI ::= SSI LSINOSI 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		SSi n1 = (SSi)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		LinkedList<SSi> n2 = (LinkedList<SSi>)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Si(n1, n2);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SI",31, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SI ::= SSI SINO 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		SSi n1 = (SSi)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Instruccion n3 = (Instruccion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Si(n1, n3);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SI",31, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SI ::= SSI 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		SSi n1 = (SSi)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Si(n1);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SI",31, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SSI ::= pr_si pari EXP pard llai INSTRUCCIONES llad 
            {
              SSi RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Instruccion> n3 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new SSi(n2, n3, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SSI",6, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SSI ::= pr_si pari EXP pard llai llad 
            {
              SSi RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		RESULT = new SSi(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SSI",6, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LSINOSI ::= LSINOSI SINOSI 
            {
              LinkedList<SSi> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<SSi> n1 = (LinkedList<SSi>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		SSi n2 = (SSi)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n1; RESULT.add(n2);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LSINOSI",43, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LSINOSI ::= SINOSI 
            {
              LinkedList<SSi> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		SSi n1 = (SSi)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new LinkedList<SSi>(); RESULT.add(n1);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LSINOSI",43, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SINOSI ::= pr_sino pr_si pari EXP pard llai INSTRUCCIONES llad 
            {
              SSi RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Instruccion> n3 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new SSi(n2, n3, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SINOSI",7, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SINOSI ::= pr_sino pr_si pari EXP pard llai llad 
            {
              SSi RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		RESULT = new SSi(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SINOSI",7, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-6)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SINO ::= pr_sino llai INSTRUCCIONES llad 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Instruccion> n2 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Sino(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SINO",32, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SINO ::= pr_sino llai llad 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		RESULT = new Sino(n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("SINO",32, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TERNARIO ::= EXP inter EXP dospuntos EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n3 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n4 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Ternario(n1, n3, n4, n2left, n2right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("TERNARIO",20, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DETENER ::= pr_detener 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Detener(nleft, nright);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("DETENER",29, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RETORNAR ::= pr_retornar EXP 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Retornar(n2, n1left, n1right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("RETORNAR",30, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RETORNAR ::= pr_retornar 
            {
              Instruccion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Retornar(null, nleft, nright);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("RETORNAR",30, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IMPRIMIR ::= pr_imprimir pari EXP pard 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = new Imprimir(n, pleft, pright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",28, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ASIGNACION ::= id OPASIG EXP 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Operador n2 = (Operador)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n3 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Asignacion(n1, n2, n3, n2left, n2right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ASIGNACION ::= id OPASIG ARREGLO 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Operador n2 = (Operador)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Arreglo n3 = (Arreglo)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Asignacion(n1, n2, n3, n2left, n2right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ASIGNACION ::= id OPASIG OBJETO 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Operador n2 = (Operador)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Objeto n3 = (Objeto)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Asignacion(n1, n2, n3, n2left, n2right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ASIGNACION ::= id punto id OPASIG EXP 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Operador n3 = (Operador)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n4 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Asignacion(n1, n2, n3, n4, n3left, n3right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ASIGNACION ::= id punto id OPASIG ARREGLO 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Operador n3 = (Operador)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Arreglo n4 = (Arreglo)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Asignacion(n1, n2, n3, n4, n3left, n3right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-4)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ASIGNACION ::= id punto id cori EXP cord OPASIG EXP 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		Expresion n3 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Operador n4 = (Operador)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n5 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Asignacion(n1, n2, n3, n4, n5, n4left, n4right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-7)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ASIGNACION ::= id cori EXP cord OPASIG EXP 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Operador n3 = (Operador)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n4 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Asignacion(n1, n2, n3, n4, n3left, n3right);
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",27, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPASIG ::= igual 
            {
              Operador RESULT =null;
		RESULT = Operador.IGUAL;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("OPASIG",11, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPASIG ::= masigual 
            {
              Operador RESULT =null;
		RESULT = Operador.MASIGUAL;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("OPASIG",11, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPASIG ::= porigual 
            {
              Operador RESULT =null;
		RESULT = Operador.PORIGUAL;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("OPASIG",11, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPASIG ::= menigual 
            {
              Operador RESULT =null;
		RESULT = Operador.MENIGUAL;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("OPASIG",11, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OPASIG ::= divigual 
            {
              Operador RESULT =null;
		RESULT = Operador.DIVIGUAL;
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("OPASIG",11, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION ::= pr_var LID igual EXP 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		LinkedList<Id> n2 = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n4 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new Declaracion(n2, n4, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",26, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= pr_var LID igual ARREGLO 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		LinkedList<Id> n2 = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Arreglo n4 = (Arreglo)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new Declaracion(n2, n4, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",26, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= pr_var LID igual OBJETO 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		LinkedList<Id> n2 = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Objeto n4 = (Objeto)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new Declaracion(n2, n4, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",26, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= pr_var LID 
            {
              Instruccion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		LinkedList<Id> n2 = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new Declaracion(n2, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("DECLARACION",26, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARREGLO ::= cori LEXP cord 
            {
              Arreglo RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = new Arreglo(n1); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ARREGLO",9, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARREGLO ::= cori cord 
            {
              Arreglo RESULT =null;
		 RESULT = new Arreglo(); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("ARREGLO",9, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LEXP ::= LEXP coma EXP 
            {
              LinkedList<Expresion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		LinkedList<Expresion> n1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n1; RESULT.add(n2); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LEXP",39, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LEXP ::= EXP 
            {
              LinkedList<Expresion> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new LinkedList<Expresion>(); RESULT.add(n1); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LEXP",39, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OBJETO ::= llai LPARES llad 
            {
              Objeto RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Par> n1 = (LinkedList<Par>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = new Objeto(n1); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("OBJETO",10, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LPARES ::= LPARES coma PAR 
            {
              LinkedList<Par> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		LinkedList<Par> n1 = (LinkedList<Par>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Par n2 = (Par)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n1; RESULT.add(n2); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LPARES",41, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LPARES ::= PAR 
            {
              LinkedList<Par> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Par n1 = (Par)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new LinkedList<Par>(); RESULT.add(n1); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LPARES",41, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PAR ::= id dospuntos VALOR 
            {
              Par RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new Par(n1, n3, n2left, n2right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("PAR",8, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VALOR ::= EXP 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n1; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("VALOR",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VALOR ::= cori LEXP cord 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		LinkedList<Expresion> n1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		 RESULT = new Arreglo(n1); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("VALOR",1, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LID ::= LID coma id 
            {
              LinkedList<Id> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		LinkedList<Id> n1 = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = n1; RESULT.add(new Id(n2, n2left, n2right)); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LID",38, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LID ::= id 
            {
              LinkedList<Id> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		 RESULT = new LinkedList<Id>(); RESULT.add(new Id(n1, n1left, n1right)); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LID",38, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXP ::= EXP mas EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.MAS, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.MENOS, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXP ::= EXP por EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.POR, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.DIV, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXP ::= EXP pot EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n1, n2, Operador.POT, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXP ::= EXP masmas 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n, Operador.MASMAS, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXP ::= EXP menmen 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n, Operador.MENMEN, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Aritmetica(n, Operador.MENOS, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // EXP ::= pari EXP pard 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // EXP ::= LOGICO 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // EXP ::= TERNARIO 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // EXP ::= CALL_FUNCION 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // EXP ::= CALL_NAT_INT 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // EXP ::= CALL_NAT_ARR2 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // EXP ::= entero 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Tipo.ENTERO, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Tipo.DECIMAL, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Tipo.CADENA, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // EXP ::= pr_nulo 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Tipo.UNDEFINED, n.toLowerCase(), nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // EXP ::= id 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Variable(n1, null, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // EXP ::= id punto id 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Variable(n1, n2, null, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // EXP ::= id punto id cori EXP cord 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n3 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Variable(n1, n2, n3, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-5)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // EXP ::= id cori EXP cord 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		RESULT = new Variable(n1, n2, n1left, n1right); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("EXP",17, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-3)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LOGICO ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Logica(n1, n2, Operador.AND, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LOGICO",18, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LOGICO ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Logica(n1, n2, Operador.OR, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LOGICO",18, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LOGICO ::= not EXP 
            {
              Expresion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Logica(n, Operador.NOT, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LOGICO",18, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LOGICO ::= RELACIONAL 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = n; 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LOGICO",18, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LOGICO ::= pr_verdadero 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Tipo.BOOLEANO, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LOGICO",18, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LOGICO ::= pr_falso 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Literal(Tipo.BOOLEANO, n, nleft, nright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("LOGICO",18, ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // RELACIONAL ::= EXP igualigual EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.IGUALIGUAL, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // RELACIONAL ::= EXP diferente EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.DIFERENTE, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // RELACIONAL ::= EXP mayor EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.MAYOR, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // RELACIONAL ::= EXP menor EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.MENOR, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // RELACIONAL ::= EXP mayorigual EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.MAYORIGUAL, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // RELACIONAL ::= EXP menorigual EXP 
            {
              Expresion RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).right;
		Expresion n1 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$fsParser$stack.elementAt(CUP$fsParser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()).right;
		Expresion n2 = (Expresion)((java_cup.runtime.Symbol) CUP$fsParser$stack.peek()).value;
		RESULT = new Relacional(n1, n2, Operador.MENORIGUAL, opleft, opright); 
              CUP$fsParser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",19, ((java_cup.runtime.Symbol)CUP$fsParser$stack.elementAt(CUP$fsParser$top-2)), ((java_cup.runtime.Symbol)CUP$fsParser$stack.peek()), RESULT);
            }
          return CUP$fsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$fsParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$fsParser$do_action(
    int                        CUP$fsParser$act_num,
    java_cup.runtime.lr_parser CUP$fsParser$parser,
    java.util.Stack            CUP$fsParser$stack,
    int                        CUP$fsParser$top)
    throws java.lang.Exception
    {
              return CUP$fsParser$do_action_part00000000(
                               CUP$fsParser$act_num,
                               CUP$fsParser$parser,
                               CUP$fsParser$stack,
                               CUP$fsParser$top);
    }
}

}
