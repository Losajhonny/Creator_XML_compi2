/* The following code was generated by JFlex 1.6.1 */

package fs.analizador;

import java_cup.runtime.Symbol;
import otros.Constante;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/fs/analizador/fsScanner.jflex</tt>
 */
public class fsScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;
  public static final int CARACTER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\6\1\10\1\11\1\7\22\0\1\1\1\36\1\14"+
    "\3\0\1\37\1\15\1\22\1\23\1\13\1\31\1\26\1\32\1\4"+
    "\1\5\12\3\1\25\1\24\1\35\1\30\1\34\1\27\1\0\1\41"+
    "\1\65\1\57\1\51\1\52\1\60\1\66\1\63\1\44\1\70\1\2"+
    "\1\56\1\45\1\53\1\47\1\46\1\67\1\42\1\55\1\50\1\61"+
    "\1\40\1\2\1\64\1\62\1\2\1\20\1\71\1\21\1\33\1\2"+
    "\1\0\1\41\1\65\1\57\1\51\1\52\1\60\1\66\1\63\1\44"+
    "\1\70\1\2\1\56\1\45\1\53\1\47\1\46\1\67\1\42\1\55"+
    "\1\50\1\61\1\40\1\2\1\64\1\62\1\2\1\16\1\12\1\17"+
    "\7\0\1\10\252\0\2\43\115\0\1\54\u1ea8\0\1\10\1\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\1\3\3\1\1"+
    "\6\3\1\1\5\3\1\34\1\35\1\36\1\37\1\40"+
    "\3\0\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\2\3\1\0\3\3"+
    "\2\0\3\3\1\0\5\3\1\55\1\0\1\55\5\3"+
    "\1\0\3\3\1\56\1\57\1\60\1\61\1\2\1\0"+
    "\1\62\1\3\1\0\5\3\2\0\2\3\1\63\1\3"+
    "\1\0\4\3\1\0\3\3\2\0\3\3\1\0\3\3"+
    "\1\0\2\3\1\0\1\3\2\0\1\3\1\0\7\3"+
    "\3\0\3\3\1\0\1\3\1\0\4\3\1\0\2\3"+
    "\1\64\1\65\1\0\1\65\2\3\2\66\1\3\1\0"+
    "\1\3\1\0\2\3\1\0\1\3\1\0\1\2\1\3"+
    "\1\0\3\3\1\0\4\3\3\0\3\3\1\0\1\3"+
    "\1\0\2\3\2\67\1\3\1\0\2\3\1\0\3\3"+
    "\2\70\1\0\1\3\1\0\1\3\1\0\2\3\1\0"+
    "\3\3\2\71\1\72\1\3\1\73\3\0\3\3\2\74"+
    "\2\75\2\3\1\0\2\3\1\0\5\3\1\0\5\3"+
    "\1\0\1\3\1\0\1\3\2\76\1\3\1\0\4\3"+
    "\3\0\4\3\1\77\1\0\1\3\1\100\1\0\2\3"+
    "\1\0\4\3\1\0\6\3\2\101\2\102\1\3\1\0"+
    "\1\3\1\103\1\104\1\105\1\106\1\107\1\110\1\106"+
    "\1\107\1\110\1\3\1\0\1\3\1\0\1\3\1\111"+
    "\1\0\5\3\1\0\2\3\1\0\4\3\1\112\1\0"+
    "\2\3\1\0\1\3\1\0\1\3\1\0\5\3\1\0"+
    "\2\3\1\0\4\3\2\113\1\3\1\0\1\3\2\114"+
    "\2\115\4\3\1\0\1\3\1\116\1\0\4\3\1\117"+
    "\1\0\3\3\2\120\4\3\2\121\1\0\4\3\2\122"+
    "\2\3\1\123\3\3\1\0\4\3\1\0\2\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\3\1\0\1\3\1\124"+
    "\1\3\1\0\1\3\1\125\2\3\1\0\2\3\1\0"+
    "\2\3\1\0\2\3\1\126\1\0\1\3\1\127\1\0"+
    "\1\3\1\130\2\131\1\3\1\0\1\3\1\0\2\3"+
    "\2\132\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\2\133\1\0\1\3\2\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\256\0\350\0\u0122\0\256"+
    "\0\u015c\0\256\0\u0196\0\u01d0\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\u020a\0\u0244\0\u027e\0\256\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
    "\0\u0740\0\256\0\256\0\u077a\0\256\0\u07b4\0\u07ee\0\u0828"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\256\0\256\0\256\0\u0862\0\u089c\0\u08d6\0\u0910"+
    "\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\u0eba\0\256\0\256\0\256\0\u07b4\0\u07ee\0\u0ef4\0\350"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\350\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\350"+
    "\0\256\0\u1d3a\0\350\0\u1d74\0\u1dae\0\256\0\350\0\u1de8"+
    "\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"+
    "\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e"+
    "\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\256\0\350"+
    "\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a"+
    "\0\256\0\350\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\256\0\350\0\350"+
    "\0\u2902\0\350\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e"+
    "\0\256\0\350\0\256\0\350\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16"+
    "\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6"+
    "\0\u2f20\0\256\0\350\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042"+
    "\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212"+
    "\0\350\0\u324c\0\u3286\0\350\0\u32c0\0\u32fa\0\u3334\0\u336e"+
    "\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e"+
    "\0\u3578\0\u35b2\0\u35ec\0\256\0\350\0\256\0\350\0\u3626"+
    "\0\u3660\0\u369a\0\350\0\350\0\350\0\256\0\256\0\256"+
    "\0\350\0\350\0\350\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc"+
    "\0\350\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952"+
    "\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\350"+
    "\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8"+
    "\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88"+
    "\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\256\0\350\0\u3fe4"+
    "\0\u401e\0\u4058\0\256\0\350\0\256\0\350\0\u4092\0\u40cc"+
    "\0\u4106\0\u4140\0\u417a\0\u41b4\0\350\0\u41ee\0\u4228\0\u4262"+
    "\0\u429c\0\u42d6\0\350\0\u4310\0\u434a\0\u4384\0\u43be\0\256"+
    "\0\350\0\u43f8\0\u4432\0\u446c\0\u44a6\0\256\0\350\0\u44e0"+
    "\0\u451a\0\u4554\0\u458e\0\u45c8\0\256\0\350\0\u4602\0\u463c"+
    "\0\350\0\u4676\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798\0\u47d2"+
    "\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2"+
    "\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72"+
    "\0\u4bac\0\u4be6\0\350\0\u4c20\0\u4c5a\0\u4c94\0\350\0\u4cce"+
    "\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e"+
    "\0\u4ed8\0\u4f12\0\350\0\u4f4c\0\u4f86\0\350\0\u4fc0\0\u4ffa"+
    "\0\350\0\256\0\350\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c"+
    "\0\u5156\0\256\0\350\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278"+
    "\0\u52b2\0\u52ec\0\u5326\0\u5360\0\u539a\0\256\0\350\0\u53d4"+
    "\0\u540e\0\256\0\350";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\5"+
    "\1\0\1\5\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\6\1\47"+
    "\1\50\1\51\1\6\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\4\6\1\60\3\6\1\4\6\61\2\0\4\61"+
    "\1\62\1\63\53\61\1\64\6\61\2\0\4\61\1\65"+
    "\1\62\53\61\1\64\74\0\2\6\34\0\3\6\1\0"+
    "\10\6\1\0\14\6\4\0\1\7\1\66\72\0\1\67"+
    "\5\0\1\70\14\0\1\71\53\0\1\72\107\0\1\73"+
    "\71\0\1\74\71\0\1\75\1\76\70\0\1\77\1\0"+
    "\1\100\67\0\1\101\71\0\1\102\71\0\1\103\100\0"+
    "\1\104\34\0\2\6\34\0\1\6\1\105\1\6\1\0"+
    "\6\6\1\106\1\6\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\10\6\1\107\1\110\1\111\12\6\3\0"+
    "\2\6\34\0\3\6\1\0\6\6\1\112\1\6\1\0"+
    "\14\6\46\0\1\113\5\0\1\114\20\0\2\6\34\0"+
    "\3\6\1\0\1\6\1\115\5\6\1\116\1\0\14\6"+
    "\3\0\2\6\34\0\1\6\1\117\1\6\1\120\1\121"+
    "\7\6\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\10\6\1\0\10\6\1\122\3\6\3\0\2\6\34\0"+
    "\3\6\1\0\3\6\1\123\4\6\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\0\6\6\1\124\1\6\1\0"+
    "\14\6\3\0\2\6\34\0\3\6\1\0\10\6\1\0"+
    "\4\6\1\125\7\6\44\0\2\126\5\0\1\127\21\0"+
    "\2\6\34\0\3\6\1\126\1\130\5\6\1\131\1\6"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\6\6"+
    "\1\132\1\6\1\0\14\6\3\0\2\6\34\0\1\6"+
    "\1\133\1\134\1\0\10\6\1\0\14\6\3\0\2\6"+
    "\34\0\1\6\1\135\1\6\1\136\1\137\7\6\1\0"+
    "\4\6\1\140\7\6\3\0\2\6\34\0\3\6\1\0"+
    "\10\6\1\0\4\6\1\141\7\6\1\0\6\61\2\0"+
    "\4\61\2\0\53\61\15\0\1\65\1\63\24\0\1\142"+
    "\5\0\1\143\2\0\1\144\21\0\1\145\66\0\6\67"+
    "\2\5\2\0\1\146\57\67\13\70\1\147\56\70\2\0"+
    "\2\6\34\0\2\6\1\150\1\0\10\6\1\0\14\6"+
    "\3\0\2\6\34\0\2\6\1\151\1\0\10\6\1\0"+
    "\14\6\60\0\1\152\14\0\2\6\34\0\3\6\1\0"+
    "\10\6\1\0\2\6\1\153\11\6\3\0\2\6\34\0"+
    "\3\6\1\0\10\6\1\0\2\6\1\154\6\6\1\155"+
    "\2\6\3\0\2\6\34\0\3\6\1\0\4\6\1\156"+
    "\1\157\2\6\1\0\14\6\47\0\1\160\63\0\1\161"+
    "\33\0\2\6\34\0\3\6\1\0\2\6\1\162\5\6"+
    "\1\0\14\6\3\0\2\6\34\0\1\163\2\6\1\0"+
    "\10\6\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\2\6\1\164\5\6\1\0\7\6\1\165\4\6\54\0"+
    "\1\166\20\0\2\6\34\0\3\6\1\0\7\6\1\167"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\4\6"+
    "\1\170\3\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\5\6\1\171\2\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\4\6\1\172\3\6\1\173\1\174"+
    "\2\6\1\175\10\6\3\0\2\6\34\0\3\6\1\0"+
    "\10\6\1\0\1\6\1\176\12\6\54\0\1\177\74\0"+
    "\1\200\15\0\2\6\34\0\3\6\1\0\7\6\1\201"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\10\6"+
    "\1\0\1\6\1\202\12\6\3\0\2\6\34\0\3\6"+
    "\1\0\6\6\1\203\1\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\204\1\205\13\6\3\0"+
    "\2\6\34\0\3\6\1\0\6\6\1\206\1\6\1\0"+
    "\14\6\3\0\2\6\34\0\3\6\1\0\10\6\1\0"+
    "\1\6\1\207\12\6\57\0\1\210\15\0\2\6\34\0"+
    "\3\6\1\0\10\6\1\0\1\6\1\211\12\6\3\0"+
    "\2\6\34\0\3\6\1\0\7\6\1\212\1\0\14\6"+
    "\3\0\2\6\34\0\3\6\1\0\10\6\1\213\1\214"+
    "\13\6\1\0\5\215\1\5\5\215\1\216\56\215\2\0"+
    "\2\6\34\0\3\6\1\0\5\6\1\217\2\6\1\0"+
    "\14\6\53\0\1\220\21\0\2\6\34\0\3\6\1\0"+
    "\6\6\1\221\1\6\1\0\14\6\3\0\2\6\34\0"+
    "\1\6\1\222\1\6\1\0\6\6\1\223\1\6\1\0"+
    "\1\6\1\224\12\6\3\0\2\6\34\0\3\6\1\0"+
    "\10\6\1\0\4\6\1\225\7\6\3\0\2\6\34\0"+
    "\3\6\1\0\3\6\1\226\4\6\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\0\10\6\1\0\4\6\1\227"+
    "\7\6\43\0\1\230\4\0\1\231\74\0\1\232\21\0"+
    "\2\6\34\0\2\6\1\233\1\0\3\6\1\234\4\6"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\6\6"+
    "\1\235\1\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\236\1\237\7\6\1\0\14\6\44\0\2\240\27\0"+
    "\2\6\34\0\3\6\1\240\1\241\7\6\1\0\14\6"+
    "\3\0\2\6\34\0\3\6\1\0\6\6\1\242\1\6"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\3\6"+
    "\1\243\4\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\6\6\1\244\1\6\1\0\14\6\60\0\1\245"+
    "\14\0\2\6\34\0\3\6\1\0\10\6\1\0\2\6"+
    "\1\246\11\6\3\0\2\6\34\0\3\6\1\0\6\6"+
    "\1\247\1\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\3\6\1\250\4\6\1\0\14\6\50\0\1\251"+
    "\74\0\1\252\21\0\2\6\34\0\3\6\1\0\3\6"+
    "\1\253\4\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\6\6\1\254\1\6\1\0\14\6\3\0\2\6"+
    "\34\0\2\6\1\255\1\0\10\6\1\0\14\6\50\0"+
    "\1\256\24\0\2\6\34\0\3\6\1\0\3\6\1\257"+
    "\4\6\1\0\14\6\3\0\2\6\34\0\1\6\1\260"+
    "\1\6\1\0\10\6\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\10\6\1\261\1\262\13\6\51\0\1\263"+
    "\23\0\2\6\34\0\3\6\1\0\4\6\1\264\3\6"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\10\6"+
    "\1\0\2\6\1\265\11\6\60\0\1\266\14\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\0\2\6\1\267\11\6"+
    "\1\0\5\70\1\270\5\70\1\147\63\70\1\271\5\70"+
    "\1\147\56\70\2\0\2\6\34\0\1\6\1\272\1\6"+
    "\1\0\10\6\1\0\14\6\54\0\1\273\20\0\2\6"+
    "\34\0\3\6\1\0\7\6\1\274\1\0\14\6\3\0"+
    "\2\6\34\0\2\6\1\275\1\0\10\6\1\0\14\6"+
    "\3\0\2\6\34\0\2\6\1\276\1\0\10\6\1\0"+
    "\14\6\3\0\2\6\34\0\3\6\1\277\1\300\7\6"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\7\6"+
    "\1\301\1\0\14\6\3\0\2\6\34\0\2\6\1\302"+
    "\1\0\10\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\10\6\1\0\2\6\1\303\11\6\44\0\2\304"+
    "\67\0\1\305\71\0\1\306\31\0\2\6\34\0\3\6"+
    "\1\304\1\307\7\6\1\0\14\6\3\0\2\6\34\0"+
    "\2\6\1\310\1\0\10\6\1\0\14\6\3\0\2\6"+
    "\34\0\2\6\1\311\1\0\10\6\1\0\14\6\46\0"+
    "\1\312\26\0\2\6\34\0\3\6\1\0\1\6\1\313"+
    "\6\6\1\0\14\6\46\0\1\314\26\0\2\6\34\0"+
    "\3\6\1\0\1\6\1\315\6\6\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\0\7\6\1\316\1\0\14\6"+
    "\3\0\2\6\34\0\3\6\1\0\10\6\1\317\1\320"+
    "\13\6\3\0\2\6\34\0\3\6\1\0\7\6\1\321"+
    "\1\0\14\6\53\0\1\322\21\0\2\6\34\0\3\6"+
    "\1\0\6\6\1\323\1\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\0\2\6\1\324\11\6"+
    "\60\0\1\325\14\0\2\6\34\0\3\6\1\0\10\6"+
    "\1\0\2\6\1\326\11\6\3\0\2\6\34\0\3\6"+
    "\1\0\10\6\1\0\11\6\1\327\2\6\3\0\2\6"+
    "\34\0\2\6\1\330\1\0\10\6\1\0\14\6\50\0"+
    "\1\331\24\0\2\6\34\0\3\6\1\0\3\6\1\332"+
    "\4\6\1\0\14\6\43\0\1\333\31\0\2\6\34\0"+
    "\2\6\1\334\1\0\10\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\335\1\336\7\6\1\0\14\6\42\0"+
    "\1\337\32\0\2\6\34\0\1\6\1\340\1\6\1\0"+
    "\10\6\1\0\14\6\6\0\1\215\66\0\2\6\34\0"+
    "\3\6\1\0\5\6\1\341\2\6\1\0\14\6\52\0"+
    "\1\342\22\0\2\6\34\0\3\6\1\0\5\6\1\343"+
    "\2\6\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\10\6\1\0\11\6\1\344\2\6\3\0\2\6\34\0"+
    "\2\6\1\345\1\0\10\6\1\0\14\6\60\0\1\346"+
    "\14\0\2\6\34\0\3\6\1\0\10\6\1\0\2\6"+
    "\1\347\11\6\3\0\2\6\34\0\3\6\1\0\3\6"+
    "\1\350\4\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\7\6\1\351\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\6\6\1\352\1\6\1\0\14\6\46\0"+
    "\1\353\74\0\1\354\71\0\1\355\23\0\2\6\34\0"+
    "\3\6\1\0\1\6\1\356\6\6\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\0\4\6\1\357\3\6\1\0"+
    "\14\6\3\0\2\6\34\0\3\6\1\0\4\6\1\360"+
    "\3\6\1\0\14\6\50\0\1\361\24\0\2\6\34\0"+
    "\3\6\1\0\3\6\1\362\4\6\1\0\14\6\50\0"+
    "\1\363\24\0\2\6\34\0\3\6\1\0\3\6\1\364"+
    "\4\6\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\6\6\1\365\1\6\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\6\6\1\366\1\6\1\0\14\6\54\0"+
    "\1\367\20\0\2\6\34\0\3\6\1\0\7\6\1\370"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\4\6"+
    "\1\371\3\6\1\0\14\6\60\0\1\372\14\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\0\2\6\1\373\11\6"+
    "\3\0\2\6\34\0\3\6\1\0\10\6\1\0\7\6"+
    "\1\374\4\6\3\0\2\6\34\0\1\375\1\376\1\377"+
    "\1\u0100\1\u0101\3\6\1\u0102\1\u0103\2\6\1\0\2\6"+
    "\1\u0104\5\6\1\u0105\3\6\42\0\1\u0106\32\0\2\6"+
    "\34\0\1\6\1\u0107\1\6\1\0\10\6\1\0\14\6"+
    "\50\0\1\u0108\24\0\2\6\34\0\3\6\1\0\3\6"+
    "\1\u0109\4\6\1\0\14\6\43\0\1\u010a\31\0\2\6"+
    "\34\0\2\6\1\u010b\1\0\10\6\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\0\6\6\1\u010c\1\6\1\0"+
    "\14\6\53\0\1\u010d\21\0\2\6\34\0\3\6\1\0"+
    "\6\6\1\u010e\1\6\1\0\14\6\3\0\2\6\34\0"+
    "\1\6\1\u010f\1\6\1\0\10\6\1\0\14\6\3\0"+
    "\2\6\34\0\1\6\1\u0110\1\6\1\0\10\6\1\0"+
    "\14\6\3\0\2\6\34\0\1\6\1\u0111\1\6\1\0"+
    "\10\6\1\0\14\6\44\0\2\u0112\66\0\1\u0113\73\0"+
    "\2\u0114\27\0\2\6\34\0\3\6\1\u0112\1\u0115\7\6"+
    "\1\0\14\6\3\0\2\6\34\0\1\6\1\u0116\1\6"+
    "\1\0\10\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\u0114\1\u0117\7\6\1\0\14\6\3\0\2\6\34\0"+
    "\2\6\1\u0118\1\0\10\6\1\0\14\6\3\0\2\6"+
    "\34\0\2\6\1\u0119\1\0\10\6\1\0\14\6\52\0"+
    "\1\u011a\22\0\2\6\34\0\3\6\1\0\5\6\1\u011b"+
    "\2\6\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\3\6\1\u011c\4\6\1\0\14\6\44\0\2\u011d\27\0"+
    "\2\6\34\0\3\6\1\u011d\1\u011e\7\6\1\0\14\6"+
    "\3\0\2\6\34\0\3\6\1\0\1\6\1\u011f\6\6"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\u0120\1\u0121"+
    "\5\6\1\u0122\1\6\1\0\14\6\3\0\2\6\34\0"+
    "\2\6\1\u0123\1\0\10\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\6\6\1\u0124\1\6\1\0\14\6"+
    "\46\0\1\u0125\26\0\2\6\34\0\3\6\1\0\1\6"+
    "\1\u0126\6\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\6\6\1\u0127\1\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\6\6\1\u0128\1\6\1\0\14\6"+
    "\3\0\2\6\34\0\1\6\1\u0129\1\6\1\0\3\6"+
    "\1\u012a\4\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\3\6\1\u012b\4\6\1\0\14\6\43\0\1\u012c"+
    "\31\0\2\6\34\0\2\6\1\u012d\1\0\10\6\1\0"+
    "\14\6\54\0\1\u012e\20\0\2\6\34\0\3\6\1\0"+
    "\7\6\1\u012f\1\0\14\6\3\0\2\6\34\0\2\6"+
    "\1\u0130\1\0\10\6\1\0\14\6\54\0\1\u0131\20\0"+
    "\2\6\34\0\3\6\1\0\7\6\1\u0132\1\0\14\6"+
    "\3\0\2\6\34\0\2\6\1\u0133\1\0\10\6\1\0"+
    "\14\6\3\0\2\6\34\0\2\6\1\u0134\1\0\10\6"+
    "\1\0\14\6\3\0\2\6\34\0\2\6\1\u0135\1\0"+
    "\10\6\1\0\14\6\43\0\1\u0136\71\0\1\u0137\71\0"+
    "\1\u0138\31\0\2\6\34\0\2\6\1\u0139\1\0\10\6"+
    "\1\0\14\6\3\0\2\6\34\0\2\6\1\u013a\1\0"+
    "\10\6\1\0\14\6\3\0\2\6\34\0\2\6\1\u013b"+
    "\1\0\10\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\2\6\1\u013c\5\6\1\0\14\6\53\0\1\u013d"+
    "\21\0\2\6\34\0\3\6\1\0\6\6\1\u013e\1\6"+
    "\1\0\14\6\50\0\1\u013f\24\0\2\6\34\0\3\6"+
    "\1\0\3\6\1\u0140\4\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\0\1\6\1\u0141\12\6"+
    "\52\0\1\u0142\22\0\2\6\34\0\3\6\1\0\5\6"+
    "\1\u0143\2\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\7\6\1\u0144\1\0\14\6\3\0\2\6\34\0"+
    "\2\6\1\u0145\1\0\6\6\1\u0146\1\6\1\0\14\6"+
    "\3\0\2\6\34\0\3\6\1\0\2\6\1\u0147\5\6"+
    "\1\0\14\6\42\0\1\u0148\32\0\2\6\34\0\1\6"+
    "\1\u0149\1\6\1\0\10\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\0\7\6\1\u014a\4\6"+
    "\3\0\2\6\34\0\3\6\1\0\10\6\1\u014b\1\u014c"+
    "\13\6\3\0\2\6\34\0\3\6\1\0\10\6\1\0"+
    "\13\6\1\u014d\3\0\2\6\34\0\3\6\1\0\7\6"+
    "\1\u014e\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\4\6\1\u014f\3\6\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\3\6\1\u0150\4\6\1\0\14\6\51\0"+
    "\1\u0151\23\0\2\6\34\0\3\6\1\0\4\6\1\u0152"+
    "\3\6\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\3\6\1\u0153\4\6\1\0\14\6\54\0\1\u0154\20\0"+
    "\2\6\34\0\3\6\1\0\7\6\1\u0155\1\0\14\6"+
    "\54\0\1\u0156\20\0\2\6\34\0\3\6\1\0\7\6"+
    "\1\u0157\1\0\14\6\53\0\1\u0158\21\0\2\6\34\0"+
    "\3\6\1\0\6\6\1\u0159\1\6\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\0\4\6\1\u015a\3\6\1\0"+
    "\14\6\3\0\2\6\34\0\1\6\1\u015b\1\6\1\0"+
    "\10\6\1\0\14\6\3\0\2\6\34\0\1\6\1\u015c"+
    "\1\6\1\0\10\6\1\0\14\6\3\0\2\6\34\0"+
    "\2\6\1\u015d\1\0\10\6\1\0\14\6\67\0\1\u015e"+
    "\5\0\2\6\34\0\3\6\1\0\10\6\1\0\11\6"+
    "\1\u015f\2\6\3\0\2\6\34\0\3\6\1\0\4\6"+
    "\1\u0160\3\6\1\0\14\6\47\0\1\u0161\25\0\2\6"+
    "\34\0\3\6\1\0\2\6\1\u0162\5\6\1\0\14\6"+
    "\3\0\2\6\34\0\1\6\1\u0163\1\6\1\0\10\6"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\4\6"+
    "\1\u0164\3\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\3\6\1\u0165\4\6\1\0\14\6\53\0\1\u0166"+
    "\21\0\2\6\34\0\3\6\1\0\6\6\1\u0167\1\6"+
    "\1\0\14\6\3\0\2\6\34\0\2\6\1\u0168\1\0"+
    "\10\6\1\0\14\6\51\0\1\u0169\23\0\2\6\34\0"+
    "\3\6\1\0\4\6\1\u016a\3\6\1\0\14\6\42\0"+
    "\1\u016b\32\0\2\6\34\0\1\6\1\u016c\1\6\1\0"+
    "\10\6\1\0\14\6\50\0\1\u016d\24\0\2\6\34\0"+
    "\3\6\1\0\3\6\1\u016e\4\6\1\0\14\6\3\0"+
    "\2\6\34\0\1\6\1\u016f\1\6\1\0\10\6\1\0"+
    "\14\6\3\0\2\6\34\0\3\6\1\0\10\6\1\0"+
    "\5\6\1\u0170\6\6\3\0\2\6\34\0\3\6\1\0"+
    "\4\6\1\u0171\3\6\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\3\6\1\u0172\4\6\1\0\14\6\53\0"+
    "\1\u0173\21\0\2\6\34\0\3\6\1\0\6\6\1\u0174"+
    "\1\6\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\3\6\1\u0175\4\6\1\0\14\6\57\0\1\u0176\15\0"+
    "\2\6\34\0\3\6\1\0\10\6\1\0\1\6\1\u0177"+
    "\12\6\3\0\2\6\34\0\3\6\1\0\4\6\1\u0178"+
    "\3\6\1\0\14\6\3\0\2\6\34\0\2\6\1\u0179"+
    "\1\0\6\6\1\u017a\1\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\7\6\1\u017b\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\u017c\1\u017d\5\6\1\u017e\1\u017f"+
    "\1\0\14\6\53\0\1\u0180\21\0\2\6\34\0\3\6"+
    "\1\0\6\6\1\u0181\1\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\7\6\1\u0182\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\0\5\6\1\u0183\2\6\1\0"+
    "\14\6\3\0\2\6\34\0\3\6\1\0\6\6\1\u0184"+
    "\1\6\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\5\6\1\u0185\2\6\1\0\14\6\54\0\1\u0186\20\0"+
    "\2\6\34\0\3\6\1\0\7\6\1\u0187\1\0\14\6"+
    "\53\0\1\u0188\21\0\2\6\34\0\3\6\1\0\6\6"+
    "\1\u0189\1\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\6\6\1\u018a\1\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\3\6\1\u018b\4\6\1\0\14\6"+
    "\3\0\2\6\34\0\3\6\1\0\7\6\1\u018c\1\0"+
    "\14\6\52\0\1\u018d\22\0\2\6\34\0\3\6\1\0"+
    "\5\6\1\u018e\2\6\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\4\6\1\u018f\3\6\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\0\3\6\1\u0190\4\6\1\0"+
    "\14\6\3\0\2\6\34\0\1\6\1\u0191\1\6\1\0"+
    "\10\6\1\0\14\6\3\0\2\6\34\0\3\6\1\0"+
    "\6\6\1\u0192\1\6\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\10\6\1\0\7\6\1\u0193\4\6\3\0"+
    "\2\6\34\0\3\6\1\0\10\6\1\0\4\6\1\u0194"+
    "\7\6\67\0\1\u0195\5\0\2\6\34\0\3\6\1\0"+
    "\10\6\1\0\11\6\1\u0196\2\6\3\0\2\6\34\0"+
    "\3\6\1\0\10\6\1\0\7\6\1\u0197\4\6\3\0"+
    "\2\6\34\0\3\6\1\0\10\6\1\0\1\6\1\u0198"+
    "\12\6\3\0\2\6\34\0\3\6\1\0\6\6\1\u0199"+
    "\1\6\1\0\14\6\3\0\2\6\34\0\3\6\1\u019a"+
    "\1\u019b\7\6\1\0\14\6\3\0\2\6\34\0\3\6"+
    "\1\0\1\6\1\u019c\6\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\u019d\1\u019e\13\6\3\0"+
    "\2\6\34\0\3\6\1\0\4\6\1\u019f\3\6\1\0"+
    "\14\6\3\0\2\6\34\0\3\6\1\0\10\6\1\0"+
    "\2\6\1\u01a0\11\6\42\0\1\u01a1\32\0\2\6\34\0"+
    "\1\6\1\u01a2\1\6\1\0\10\6\1\0\14\6\3\0"+
    "\2\6\34\0\3\6\1\0\4\6\1\u01a3\3\6\1\0"+
    "\14\6\3\0\2\6\34\0\3\6\1\0\7\6\1\u01a4"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\5\6"+
    "\1\u01a5\2\6\1\0\14\6\70\0\1\u01a6\4\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\0\12\6\1\u01a7\1\6"+
    "\3\0\2\6\34\0\3\6\1\0\10\6\1\0\10\6"+
    "\1\u01a8\3\6\52\0\1\u01a9\22\0\2\6\34\0\3\6"+
    "\1\0\5\6\1\u01aa\2\6\1\0\14\6\3\0\2\6"+
    "\34\0\3\6\1\0\3\6\1\u01ab\4\6\1\0\14\6"+
    "\3\0\2\6\34\0\3\6\1\0\4\6\1\u01ac\3\6"+
    "\1\0\14\6\66\0\1\u01ad\6\0\2\6\34\0\3\6"+
    "\1\0\10\6\1\0\10\6\1\u01ae\3\6\3\0\2\6"+
    "\34\0\3\6\1\0\3\6\1\u01af\4\6\1\0\14\6"+
    "\3\0\2\6\34\0\3\6\1\0\10\6\1\0\4\6"+
    "\1\u01b0\7\6\3\0\2\6\34\0\3\6\1\0\3\6"+
    "\1\u01b1\4\6\1\0\14\6\62\0\1\u01b2\12\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\0\4\6\1\u01b3\7\6"+
    "\3\0\2\6\34\0\2\6\1\u01b4\1\0\10\6\1\0"+
    "\14\6\53\0\1\u01b5\21\0\2\6\34\0\3\6\1\0"+
    "\6\6\1\u01b6\1\6\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\3\6\1\u01b7\4\6\1\0\14\6\57\0"+
    "\1\u01b8\15\0\2\6\34\0\3\6\1\0\10\6\1\0"+
    "\1\6\1\u01b9\12\6\3\0\2\6\34\0\3\6\1\0"+
    "\1\6\1\u01ba\6\6\1\0\14\6\3\0\2\6\34\0"+
    "\2\6\1\u01bb\1\0\10\6\1\0\14\6\53\0\1\u01bc"+
    "\21\0\2\6\34\0\3\6\1\0\6\6\1\u01bd\1\6"+
    "\1\0\14\6\3\0\2\6\34\0\3\6\1\0\6\6"+
    "\1\u01be\1\6\1\0\14\6\42\0\1\u01bf\32\0\2\6"+
    "\34\0\1\6\1\u01c0\1\6\1\0\10\6\1\0\14\6"+
    "\3\0\2\6\34\0\2\6\1\u01c1\1\0\10\6\1\0"+
    "\14\6\53\0\1\u01c2\21\0\2\6\34\0\3\6\1\0"+
    "\6\6\1\u01c3\1\6\1\0\14\6\3\0\2\6\34\0"+
    "\3\6\1\0\6\6\1\u01c4\1\6\1\0\14\6\51\0"+
    "\1\u01c5\23\0\2\6\34\0\3\6\1\0\4\6\1\u01c6"+
    "\3\6\1\0\14\6\43\0\1\u01c7\31\0\2\6\34\0"+
    "\2\6\1\u01c8\1\0\10\6\1\0\14\6\3\0\2\6"+
    "\34\0\2\6\1\u01c9\1\0\10\6\1\0\14\6\42\0"+
    "\1\u01ca\32\0\2\6\34\0\1\6\1\u01cb\1\6\1\0"+
    "\10\6\1\0\14\6\60\0\1\u01cc\14\0\2\6\34\0"+
    "\3\6\1\0\10\6\1\0\2\6\1\u01cd\11\6\3\0"+
    "\2\6\34\0\3\6\1\u01ce\1\u01cf\7\6\1\0\14\6"+
    "\64\0\1\u01d0\10\0\2\6\34\0\3\6\1\0\10\6"+
    "\1\0\6\6\1\u01d1\5\6\60\0\1\u01d2\14\0\2\6"+
    "\34\0\3\6\1\0\10\6\1\0\2\6\1\u01d3\11\6"+
    "\44\0\2\u01d4\27\0\2\6\34\0\3\6\1\u01d4\1\u01d5"+
    "\7\6\1\0\14\6\50\0\1\u01d6\24\0\2\6\34\0"+
    "\3\6\1\0\3\6\1\u01d7\4\6\1\0\14\6\41\0"+
    "\1\u01d8\33\0\2\6\34\0\1\u01d9\2\6\1\0\10\6"+
    "\1\0\14\6\50\0\1\u01da\24\0\2\6\34\0\3\6"+
    "\1\0\3\6\1\u01db\4\6\1\0\14\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21576];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\1\1\1\11\2\1\14\11"+
    "\3\1\1\11\25\1\2\11\1\1\1\11\3\0\14\11"+
    "\2\1\1\0\3\1\2\0\3\1\1\0\6\1\1\0"+
    "\6\1\1\0\3\1\3\11\2\1\1\0\2\1\1\0"+
    "\5\1\2\0\4\1\1\0\4\1\1\0\3\1\2\0"+
    "\3\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0"+
    "\1\1\1\0\7\1\3\0\3\1\1\0\1\1\1\0"+
    "\4\1\1\0\3\1\1\11\1\0\3\1\1\11\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\1\0\4\1\3\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\11\2\1\1\0\2\1\1\0\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\1\11\4\1\3\0\3\1\1\11\1\1"+
    "\1\11\3\1\1\0\2\1\1\0\5\1\1\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\1\1\0\4\1"+
    "\3\0\5\1\1\0\2\1\1\0\2\1\1\0\4\1"+
    "\1\0\6\1\1\11\1\1\1\11\2\1\1\0\4\1"+
    "\3\11\4\1\1\0\1\1\1\0\2\1\1\0\5\1"+
    "\1\0\2\1\1\0\5\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\5\1\1\0\2\1\1\0\4\1"+
    "\1\11\2\1\1\0\1\1\1\11\1\1\1\11\5\1"+
    "\1\0\2\1\1\0\5\1\1\0\3\1\1\11\5\1"+
    "\1\11\1\1\1\0\4\1\1\11\7\1\1\0\4\1"+
    "\1\0\2\1\1\0\3\1\1\0\4\1\1\0\2\1"+
    "\1\0\3\1\1\0\4\1\1\0\2\1\1\0\2\1"+
    "\1\0\3\1\1\0\2\1\1\0\2\1\1\11\2\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[475];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private String cadena = "";

    /**
    * Retorna el simbolo con sym.value
    * Con la linea, columna y texto de flex
    */
    private Symbol symbol(int value){
        return new Symbol(value, yyline, yychar, yytext());
    }

    /**
    * Retorna el simbolo con sym.id y valor asignado
    * Con la linea, columna de flex
    */
    private Symbol symbol(int id, Object value){
        return new Symbol(id, yyline, yychar, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public fsScanner(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { otros.Error err = new otros.Error(Constante.FS, Constante.LEXICO, yytext(), Constante.ent_temporal.ambito, 
                            "El caracter: "+yytext()+" no pertenece al lenguaje", 
                            Constante.archivo, yyline, yychar);
                            otros.Error.agregarError(err);
            }
          case 93: break;
          case 2: 
            { 
            }
          case 94: break;
          case 3: 
            { return symbol(sym.id);
            }
          case 95: break;
          case 4: 
            { return symbol(sym.entero);
            }
          case 96: break;
          case 5: 
            { return symbol(sym.punto);
            }
          case 97: break;
          case 6: 
            { return symbol(sym.div);
            }
          case 98: break;
          case 7: 
            { yychar=1;
            }
          case 99: break;
          case 8: 
            { return symbol(sym.por);
            }
          case 100: break;
          case 9: 
            { yybegin(CADENA); cadena="";
            }
          case 101: break;
          case 10: 
            { yybegin(CARACTER); cadena="";
            }
          case 102: break;
          case 11: 
            { return symbol(sym.llai);
            }
          case 103: break;
          case 12: 
            { return symbol(sym.llad);
            }
          case 104: break;
          case 13: 
            { return symbol(sym.cori);
            }
          case 105: break;
          case 14: 
            { return symbol(sym.cord);
            }
          case 106: break;
          case 15: 
            { return symbol(sym.pari);
            }
          case 107: break;
          case 16: 
            { return symbol(sym.pard);
            }
          case 108: break;
          case 17: 
            { return symbol(sym.ptcoma);
            }
          case 109: break;
          case 18: 
            { return symbol(sym.dospuntos);
            }
          case 110: break;
          case 19: 
            { return symbol(sym.coma);
            }
          case 111: break;
          case 20: 
            { return symbol(sym.inter);
            }
          case 112: break;
          case 21: 
            { return symbol(sym.igual);
            }
          case 113: break;
          case 22: 
            { return symbol(sym.mas);
            }
          case 114: break;
          case 23: 
            { return symbol(sym.menos);
            }
          case 115: break;
          case 24: 
            { return symbol(sym.pot);
            }
          case 116: break;
          case 25: 
            { return symbol(sym.mayor);
            }
          case 117: break;
          case 26: 
            { return symbol(sym.menor);
            }
          case 118: break;
          case 27: 
            { return symbol(sym.not);
            }
          case 119: break;
          case 28: 
            { cadena+=String.valueOf(yytext());
            }
          case 120: break;
          case 29: 
            { yybegin(YYINITIAL); return symbol(sym.cadena, cadena);
            }
          case 121: break;
          case 30: 
            { cadena+=String.valueOf("\'");
            }
          case 122: break;
          case 31: 
            { cadena+=String.valueOf("\\");
            }
          case 123: break;
          case 32: 
            { cadena+=String.valueOf("\"");
            }
          case 124: break;
          case 33: 
            { return symbol(sym.divigual);
            }
          case 125: break;
          case 34: 
            { return symbol(sym.or);
            }
          case 126: break;
          case 35: 
            { return symbol(sym.porigual);
            }
          case 127: break;
          case 36: 
            { return symbol(sym.igualigual);
            }
          case 128: break;
          case 37: 
            { return symbol(sym.masigual);
            }
          case 129: break;
          case 38: 
            { return symbol(sym.masmas);
            }
          case 130: break;
          case 39: 
            { return symbol(sym.menigual);
            }
          case 131: break;
          case 40: 
            { return symbol(sym.menmen);
            }
          case 132: break;
          case 41: 
            { return symbol(sym.mayorigual);
            }
          case 133: break;
          case 42: 
            { return symbol(sym.menorigual);
            }
          case 134: break;
          case 43: 
            { return symbol(sym.diferente);
            }
          case 135: break;
          case 44: 
            { return symbol(sym.and);
            }
          case 136: break;
          case 45: 
            { return symbol(sym.pr_si);
            }
          case 137: break;
          case 46: 
            { cadena+=String.valueOf("\r");
            }
          case 138: break;
          case 47: 
            { cadena+=String.valueOf("\t");
            }
          case 139: break;
          case 48: 
            { cadena+=String.valueOf("\n");
            }
          case 140: break;
          case 49: 
            { return symbol(sym.decimal);
            }
          case 141: break;
          case 50: 
            { return symbol(sym.pr_var);
            }
          case 142: break;
          case 51: 
            { return symbol(sym.pr_map);
            }
          case 143: break;
          case 52: 
            { return symbol(sym.pr_nulo);
            }
          case 144: break;
          case 53: 
            { return symbol(sym.pr_sino);
            }
          case 145: break;
          case 54: 
            { return symbol(sym.pr_caso);
            }
          case 146: break;
          case 55: 
            { return symbol(sym.pr_todos);
            }
          case 147: break;
          case 56: 
            { return symbol(sym.pr_falso);
            }
          case 148: break;
          case 57: 
            { return symbol(sym.pr_alclic);
            }
          case 149: break;
          case 58: 
            { return symbol(sym.pr_alguno);
            }
          case 150: break;
          case 59: 
            { return symbol(sym.pr_reduce);
            }
          case 151: break;
          case 60: 
            { return symbol(sym.pr_maximo);
            }
          case 152: break;
          case 61: 
            { return symbol(sym.pr_minimo);
            }
          case 153: break;
          case 62: 
            { return symbol(sym.pr_buscar);
            }
          case 154: break;
          case 63: 
            { return symbol(sym.pr_detener);
            }
          case 155: break;
          case 64: 
            { return symbol(sym.pr_defecto);
            }
          case 156: break;
          case 65: 
            { return symbol(sym.pr_filtrar);
            }
          case 157: break;
          case 66: 
            { return symbol(sym.pr_funcion);
            }
          case 158: break;
          case 67: 
            { return symbol(sym.pr_alcargar);
            }
          case 159: break;
          case 68: 
            { return symbol(sym.pr_alcerrar);
            }
          case 160: break;
          case 69: 
            { return symbol(sym.pr_retornar);
            }
          case 161: break;
          case 70: 
            { return symbol(sym.pr_imprimir);
            }
          case 162: break;
          case 71: 
            { return symbol(sym.pr_importar);
            }
          case 163: break;
          case 72: 
            { return symbol(sym.pr_invertir);
            }
          case 164: break;
          case 73: 
            { return symbol(sym.pr_leergxml);
            }
          case 165: break;
          case 74: 
            { return symbol(sym.pr_verdadero);
            }
          case 166: break;
          case 75: 
            { return symbol(sym.pr_ascendente);
            }
          case 167: break;
          case 76: 
            { return symbol(sym.pr_selecciona);
            }
          case 168: break;
          case 77: 
            { return symbol(sym.pr_crearvideo);
            }
          case 169: break;
          case 78: 
            { return symbol(sym.pr_creartexto);
            }
          case 170: break;
          case 79: 
            { return symbol(sym.pr_crearboton);
            }
          case 171: break;
          case 80: 
            { return symbol(sym.pr_descendente);
            }
          case 172: break;
          case 81: 
            { return symbol(sym.pr_crearimagen);
            }
          case 173: break;
          case 82: 
            { return symbol(sym.pr_obtenerporid);
            }
          case 174: break;
          case 83: 
            { return symbol(sym.pr_crearventana);
            }
          case 175: break;
          case 84: 
            { return symbol(sym.pr_crearareatexto);
            }
          case 176: break;
          case 85: 
            { return symbol(sym.pr_crearcajatexto);
            }
          case 177: break;
          case 86: 
            { return symbol(sym.pr_crearcontenedor);
            }
          case 178: break;
          case 87: 
            { return symbol(sym.pr_obtenerpornombre);
            }
          case 179: break;
          case 88: 
            { return symbol(sym.pr_crearreproductor);
            }
          case 180: break;
          case 89: 
            { return symbol(sym.pr_creardespegable);
            }
          case 181: break;
          case 90: 
            { return symbol(sym.pr_obtenerporetiqueta);
            }
          case 182: break;
          case 91: 
            { return symbol(sym.pr_crearcontrolnumerico);
            }
          case 183: break;
          case 92: 
            { return symbol(sym.pr_creararraydesdearchivo);
            }
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
